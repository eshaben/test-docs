{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"reference/","title":"Moonbeam XCM SDK Reference: v1","text":""},{"location":"reference/#introduction-introduction","title":"Introduction {: #introduction }","text":"<p>The Moonbeam XCM SDK enables developers to easily transfer assets between chains, either between parachains or between a parachain and the relay chain, within the Polkadot/Kusama ecosystem. With the SDK, you don't need to worry about determining the multilocation of the origin or destination assets or which extrinsics are used on which networks to send XCM transfers.</p> <p>The SDK provides an API that enables you to get asset information for each of the supported assets, the source chains where a given asset can be sent from, and, given a source chain, the supported destination chains where the given asset can be sent to. The SDK also includes helper methods related to transferring cross-chain assets, such as the ability to get an estimated amount of the asset the destination account will receive, less any execution fees, and asset conversion methods based on the asset and number of decimals it has. All of which enables you to easily and seamlessly transfer assets across chains.</p> <p>This page includes a list of the interfaces and methods available in the XCM SDK for v1. For information on how to use the XCM SDK interfaces and methods, please refer to the Using the XCM SDK{target=_blank} guide.</p>"},{"location":"reference/#core-types-and-interfaces-asset-chain-types","title":"Core Types and Interfaces {: #asset-chain-types }","text":"<p>The XCM SDK is based on the premise of defining an asset to transfer and then defining the source chain to send the asset from and the destination chain to send the asset to, which combined builds the transfer data. The following sections cover the types and interfaces you'll interact with when interacting with assets, chains, and transfer data.</p>"},{"location":"reference/#assets-assets","title":"Assets {: #assets }","text":"<ul> <li> <p><code>Asset</code> - defines an asset's key and symbol used on the asset's origin chain</p> Name Type Description <code>key</code> string Identifies an asset <code>originSymbol</code> string The symbol of the asset on the asset's origin chain </li> <li> <p><code>AssetAmount</code> - defines properties related to an asset, including <code>Asset</code> properties, the decimals and symbol of the asset, and the amount an associated source or destination address has of the asset</p> Name Type Description <code>amount</code> bigint Identifies a particular amount of the asset (i.e., balance, minimum, maximum, etc.) <code>decimals</code> number The number of decimals the asset has <code>symbol</code> string The symbol of the asset <code>key</code> string Identifies an asset <code>originSymbol</code> string The symbol of the asset on the asset's origin chain <p>!!! note     There are a few utility methods that are available for working with <code>AssetAmount</code> class that convert the amount to various formats. Please refer to the Methods for Asset Conversions section.</p> </li> </ul>"},{"location":"reference/#chains-chains","title":"Chains {: #chains }","text":"<ul> <li> <p><code>Chain</code> - defines properties related to a chain, used to define the source and destination chains. If a chain is an EVM parachain, there are a couple additional properties</p> Name Type Description <code>ecosystem</code> Ecosystem Identifies the ecosystem the chain belongs to: <code>polkadot</code>, <code>kusama</code>, or <code>alphanet-relay</code> <code>isTestChain</code> boolean Whether the chain is a TestNet <code>key</code> string Identifies a chain <code>name</code> string The name of the chain <code>type</code> ChainType The type of the chain: <code>parachain</code> or <code>evm-parachain</code> <code>assetsData</code> Map A list of the assets that the chain supports <code>genesisHash</code> string The hash of the genesis block <code>parachainId</code> number The ID of the parachain <code>ss58Format</code> number The ss58 format{target=_blank} for the chain <code>usesChainDecimals</code> boolean A flag indicating if the chain uses its own decimals in balance queries for all the assets. Defaults to <code>false</code> <code>ws</code> string The WebSocket endpoint for the chain <code>id</code> number For EVM parachains only - The chain ID <code>rpc</code> string For EVM parachains only - The HTTP RPC endpoint for the chain <li> <p><code>ChainAssetsData</code> - defines the information needed to target the asset on the chain. This is mostly for internal usage to accommodate how different chains store their assets. The SDK defaults to the asset ID if certain properties are not applicable to the given chain</p> Name Type Description <code>asset</code> Asset The asset's key and origin symbol <code>balanceId</code> ChainAssetId The balance ID of the asset. Defaults to the asset ID <code>decimals</code> number The number of decimals the asset has <code>id</code> ChainAssetId The asset ID <code>metadataId</code> ChainAssetId The metadata ID of the asset <code>minId</code> ChainAssetId The minimum ID of the asset <code>palletInstance</code> number The number of the pallet instance the asset belongs to <code>min</code> number The minimum amount of the asset that is required to be left in the account for it to be active. Similar to the existential deposit except it is for non-native assets <p><code>ChainAssetId</code> is a generic type used to specify the location of the asset on the chain, which is different on every chain, and is defined as:</p> <p><code>ts type ChainAssetId =   | string   | number   | bigint   | { [key: string]: ChainAssetId };</code></p> </li>"},{"location":"reference/#transfer-data-transfer-data","title":"Transfer Data {: #transfer-data }","text":"<ul> <li> <p><code>TransferData</code> - defines the complete transfer data for transferring an asset, including asset, source chain, and destination chain information, and a few helper functions for the transfer process</p> Name Type Description <code>destination</code> DestinationChainTransferData The assembled destination chain and address information <code>getEstimate</code> function Gets the estimated amount of the asset that will be received by the destination address <code>isSwapPossible</code> boolean Returns whether or not the swap is possible <code>max</code> AssetAmount The maximum amount of the asset that can be transferred <code>min</code> AssetAmount The minimum amount of the asset that can be transferred <code>source</code> SourceChainTransferData The assembled source chain and address information <code>swap</code> function Swaps the destination and the source chains and returns the swapped transfer data <code>transfer</code> function Transfers a given amount of the asset from the source chain to the destination chain </li> <li> <p><code>DestinationChainTransferData</code> - defines the destination chain data for the transfer</p> Name Type Description <code>balance</code> AssetAmount The balance of the asset being transferred on the destination address <code>chain</code> AnyChain The destination chain information <code>existentialDeposit</code> AssetAmount The existential deposit for the asset being transferred on the destination chain <code>fee</code> AssetAmount The amount of fees for the asset being transferred on the destination chain <code>min</code> AssetAmount The minimum amount of the asset to transfer. This is different than <code>TransferData.min</code>, as this dictates the minimum amount that should be received on the destination chain </li> <li> <p><code>SourceChainTransferData</code> -  defines the source chain data for the transfer</p> Name Type Description <code>balance</code> AssetAmount The balance of the asset being transferred for the source address <code>chain</code> AnyChain The source chain information <code>destinationFeeBalance</code> AssetAmount The balance of the asset used to pay for fees in the destination chain <code>existentialDeposit</code> AssetAmount The existential deposit for the asset being transferred on the source chain <code>fee</code> AssetAmount The amount of fees for the asset being transferred on the source chain <code>feeBalance</code> AssetAmount The balance of the asset being transferred on the source chain <code>min</code> AssetAmount The minimum amount of the asset that should be kept on the source chain, taking into consideration the <code>existentialDeposit</code> and <code>fee</code> for the transfer <code>max</code> AssetAmount The maximum amount of the asset that can be transferred </li> </ul>"},{"location":"reference/#core-methods-core-sdk-methods","title":"Core Methods {: #core-sdk-methods }","text":"<p>The SDK provides the following core methods:</p> <ul> <li> <p><code>Sdk()</code> - exposes the methods of the XCM SDK. Must be called first to access other SDK methods</p> <p>??? code \"Parameters\"     |    Name    |     Type     |                       Description                        |     |:----------:|:------------:|:--------------------------------------------------------:|     | <code>options?</code> | SdkOptions | Allows you to specify an <code>evmSigner</code> or <code>polkadotSigner</code> |</p> <p>??? code \"Returns\"     |       Name        |   Type   |                                                        Description                                                         |     |:-----------------:|:--------:|:--------------------------------------------------------------------------------------------------------------------------:|     |     <code>assets</code>      | function | Provides an entry point to building the data necessary to transfer an asset between a source chain and a destination chain |     | <code>getTransferData</code> | function |               Builds the data necessary to transfer an asset between a source chain and a destination chain                |</p> </li> <li> <p><code>getTransferData()</code> - builds the data necessary to transfer an asset between a source chain and a destination chain</p> <p>??? code \"Parameters\"     |          Name           |               Type               |                                                               Description                                                               |     |:-----------------------:|:--------------------------------:|:---------------------------------------------------------------------------------------------------------------------------------------:|     |  <code>destinationAddress</code>   |             string             |                                      The address of the receiving account on the destination chain                                      |     | <code>destinationKeyorChain</code> |       string | AnyChain       |                                            The key or <code>Chain</code> data for the destination chain                                            |     |      <code>evmSigner?</code>       | EthersSigner  | WalletClient  | The signer for Ethereum-compatible chains that use H160 Ethereum-style accounts. Can be either an Ethers signer or a viem Wallet Client |     |      <code>keyOrAsset</code>       |        string | Asset         |                                         The key or <code>Asset</code> data for the asset being transferred                                         |     |    <code>polkadotSigner?</code>    | PolkadotSigner | IKeyringPair |                                                   The Polkadot signer or Keyring pair                                                   |     |     <code>sourceAddress</code>     |             string             |                                         The address of the sending account on the source chain                                          |     |   <code>sourceKeyOrChain</code>    |       string | AnyChain       |                                              The key or <code>Chain</code> data for the source chain                                               |</p> <p>??? code \"Returns\"     |       Name       |              Type              |                                       Description                                       |     |:----------------:|:------------------------------:|:---------------------------------------------------------------------------------------:|     |  <code>destination</code>   | DestinationChainTransferData |                 The assembled destination chain and address information                 |     |  <code>getEstimate</code>   |            function            | Gets the estimated amount of the asset that will be received by the destination address |     | <code>isSwapPossible</code> |           boolean            |                       Returns whether or not the swap is possible                       |     |      <code>max</code>       |         AssetAmount          |                 The maximum amount of the asset that can be transferred                 |     |      <code>min</code>       |         AssetAmount          |                 The minimum amount of the asset that can be transferred                 |     |     <code>source</code>     |   SourceChainTransferData    |                   The assembled source chain and address information                    |     |      <code>swap</code>      |            function            |    Swaps the destination and the source chains and returns the swapped transfer data    |     |    <code>transfer</code>    |            function            |  Transfers a given amount of the asset from the source chain to the destination chain   |</p> </li> <li> <p><code>assets()</code> - provides an entry point to building the data necessary to transfer an asset between a source chain and a destination chain</p> <p>??? code \"Parameters\"     |     Name     |    Type     |                                     Description                                      |     |:------------:|:-----------:|:------------------------------------------------------------------------------------:|     | <code>ecosystem?</code> | Ecosystem | Specify the ecosystem for a set of assets: <code>polkadot</code>, <code>kusama</code>, or <code>alphanet-relay</code> |</p> <p>??? code \"Returns\"     |   Name   |   Type    |           Description            |     |:--------:|:---------:|:--------------------------------:|     | <code>assets</code> | Asset[] |  A list of the supported assets  |     | <code>asset</code>  | function  | Sets the asset to be transferred |</p> <pre><code>Refer to the following section on how to continue to build the transfer data using the `asset` function.\n</code></pre> </li> </ul>"},{"location":"reference/#methods-for-building-transfer-data-starting-with-assets-transfer-data-builder-methods","title":"Methods for Building Transfer Data Starting with Assets {: #transfer-data-builder-methods }","text":"<p>When building transfer data with the <code>Sdk().assets()</code> function, you'll use multiple methods to build the underlying XCM message and send it.</p> <ul> <li> <p><code>asset()</code> - sets the asset to be transferred. Must call <code>assets()</code> first</p> <p>??? code \"Parameters\"     |     Name     |       Type        |                       Description                       |     |:------------:|:-----------------:|:-------------------------------------------------------:|     | <code>keyOrAsset</code> | string | Asset | The key or <code>Asset</code> data for the asset being transferred |</p> <p>??? code \"Returns\"     |      Name      |     Type     |                          Description                          |     |:--------------:|:------------:|:-------------------------------------------------------------:|     | <code>sourceChains</code> | AnyChain[] | A list of the supported source chains for the specified asset |     |    <code>source</code>    |   function   |       Sets the source chain to transfer the asset from        |</p> </li> <li> <p><code>source()</code> - sets the source chain to transfer the asset from. Must call <code>asset()</code> first</p> <p>??? code \"Parameters\"     |     Name     |         Type         |                 Description                  |     |:------------:|:--------------------:|:--------------------------------------------:|     | <code>keyOrChain</code> | string | AnyChain | The key or <code>Chain</code> data for the source chain |</p> <p>??? code \"Returns\"     |        Name         |     Type     |                                     Description                                     |     |:-------------------:|:------------:|:-----------------------------------------------------------------------------------:|     | <code>destinationChains</code> | AnyChain[] | A list of the supported destination chains for the specified asset and source chain |     |    <code>destination</code>    |   function   |                Sets the destination chain to transfer the asset from                |</p> </li> <li> <p><code>destination()</code> - sets the destination chain to transfer the asset to. Must call <code>source()</code> first</p> <p>??? code \"Parameters\"     |     Name     |         Type         |                    Description                    |     |:------------:|:--------------------:|:-------------------------------------------------:|     | <code>keyOrChain</code> | string | AnyChain | The key or <code>Chain</code> data for the destination chain |</p> <p>??? code \"Returns\"     |    Name    |   Type   |                                          Description                                          |     |:----------:|:--------:|:---------------------------------------------------------------------------------------------:|     | <code>accounts</code> | function | Sets the source address, the destination address, and the signer(s) required for the transfer |</p> </li> <li> <p><code>accounts()</code> - sets the source address, the destination address, and the signer(s) required for the transfer. Must call <code>destination()</code> first</p> <p>??? code \"Parameters\"     |         Name         |        Type        |                          Description                          |     |:--------------------:|:------------------:|:-------------------------------------------------------------:|     |   <code>sourceAddress</code>    |      string      |    The address of the sending account on the source chain     |     | <code>destinationAddress</code> |      string      | The address of the receiving account on the destination chain |     |      <code>signers?</code>      | Partial(signers) | The Ethers or Polkadot signers required to sign transactions  |</p> <p>??? code \"Returns\"     Please refer to the returns section of the <code>getTransferData()</code> method for information on the returned transfer data.</p> </li> </ul>"},{"location":"reference/#methods-for-consuming-transfer-data-transfer-data-consumer-methods","title":"Methods for Consuming Transfer Data {: #transfer-data-consumer-methods }","text":"<ul> <li> <p><code>swap()</code> - returns the transfer data necessary to swap the asset from the destination chain back to the source chain</p> <p>??? code \"Parameters\"     None</p> <p>??? code \"Returns\"     Please refer to the returns section of the <code>getTransferData()</code> method for information on the returned transfer data. Keep in mind that with the <code>swap</code> function, the <code>source</code> and <code>destination</code> in the original transfer data has been swapped.</p> </li> <li> <p><code>transfer()</code> - transfers a given amount of the asset from the source chain to the destination chain</p> <p>??? code \"Parameters\"     |   Name   |             Type             |                                  Description                                  |     |:--------:|:----------------------------:|:-----------------------------------------------------------------------------:|     | <code>amount</code> | bigint | number | string | The amount of the asset to transfer between the source and destination chains |</p> <p>??? code \"Returns\"     | Name |       Type        |                        Description                        |     |:----:|:-----------------:|:---------------------------------------------------------:|     |  -   | Promise(string) | The transaction hash for the transfer on the source chain |</p> </li> <li> <p><code>getEstimate()</code> - returns an estimated amount of the asset that will be received on the destination chain, less any destination fees</p> <p>??? code \"Parameters\"     |   Name   |        Type        |                                  Description                                  |     |:--------:|:------------------:|:-----------------------------------------------------------------------------:|     | <code>amount</code> | number | string | The amount of the asset to transfer between the source and destination chains |</p> <p>??? code \"Returns\"     | Name |     Type      |                                    Description                                    |     |:----:|:-------------:|:---------------------------------------------------------------------------------:|     |  -   | AssetAmount | An estimated amount of the asset that will be received by the destination address |</p> </li> </ul>"},{"location":"reference/#methods-for-asset-conversions-utility-functions","title":"Methods for Asset Conversions {: #utility-functions }","text":"<ul> <li> <p><code>toDecimal()</code> - converts an <code>AssetAmount</code> to a decimal. The number to convert to decimal format and the number of decimals the asset uses are pulled automatically from the <code>AssetAmount</code></p> <p>??? code \"Parameters\"     |     Name      |      Type      |                                                                    Description                                                                     |     |:-------------:|:--------------:|:--------------------------------------------------------------------------------------------------------------------------------------------------:|     | <code>maxDecimal?</code> |    number    |                                          The maximum number of decimal places to use. The default is <code>6</code>                                           |     | <code>roundType?</code>  | RoundingMode | Accepts an index that dictates the rounding method{target=_blank} to use based on the <code>RoundingMode</code> enum |</p> <pre><code>Where the `RoundingMode` enum is defined as:\n\n```js\nenum RoundingMode {\n  RoundDown = 0,\n  RoundHalfUp = 1,\n  RoundHalfEven = 2,\n  RoundUp = 3\n}\n```\n</code></pre> <p>??? code \"Returns\"     | Name |   Type   |            Description             |     |:----:|:--------:|:----------------------------------:|     |  -   | string | The given amount in decimal format |</p> </li> <li> <p><code>toBig()</code> - converts an <code>AssetAmount</code> to a big number</p> <p>??? code \"Parameters\"     None</p> <p>??? code \"Returns\"     | Name | Type  |              Description              |     |:----:|:-----:|:-------------------------------------:|     |  -   | Big | The given amount in big number format |</p> </li> <li> <p><code>toBigDecimal()</code> - converts an <code>AssetAmount</code> to a decimal and then to a big number. The number to convert to decimal format and the number of decimals the asset uses are pulled automatically from the <code>AssetAmount</code></p> <p>??? code \"Parameters\"     |     Name      |      Type      |                                                                    Description                                                                     |     |:-------------:|:--------------:|:--------------------------------------------------------------------------------------------------------------------------------------------------:|     | <code>maxDecimal?</code> |    number    |                                          The maximum number of decimal places to use. The default is <code>6</code>                                           |     | <code>roundType?</code>  | RoundingMode | Accepts an index that dictates the rounding method{target=_blank} to use based on the <code>RoundingMode</code> enum |</p> <pre><code>Where the `RoundingMode` enum is defined as:\n\n```js\nenum RoundingMode {\n  RoundDown = 0,\n  RoundHalfUp = 1,\n  RoundHalfEven = 2,\n  RoundUp = 3\n}\n```\n</code></pre> <p>??? code \"Returns\"     | Name | Type  |                  Description                  |     |:----:|:-----:|:---------------------------------------------:|     |  -   | Big | The given amount in big number decimal format |</p> </li> </ul>"},{"location":"xcm-sdk/","title":"Using the Moonbeam XCM SDK: v1","text":""},{"location":"xcm-sdk/#introduction-introduction","title":"Introduction {: #introduction }","text":"<p>The Moonbeam XCM SDK enables developers to easily transfer assets between chains, either between parachains or between a parachain and the relay chain, within the Polkadot/Kusama ecosystem. With the SDK, you don't need to worry about determining the multilocation of the origin or destination assets or which extrinsics are used on which networks to send XCM transfers.</p> <p>The XCM SDK offers helper functions, that provide a very simple interface to execute XCM transfers between chains in the Polkadot/Kusama ecosystem. In addition, the XCM config package allows any parachain project to add their information in a standard way, so they can be immediately supported by the XCM SDK.</p> <p>For an overview of the available methods and interfaces in the Moonbeam XCM SDK, please refer to the Reference{target=_blank} page.</p> <p>The examples in this guide are shown on Moonbeam, but can be adapted to be used on Moonriver or Moonbase Alpha.</p>"},{"location":"xcm-sdk/#install-the-xcm-sdk-install-the-xcm-sdk","title":"Install the XCM SDK {: #install-the-xcm-sdk }","text":"<p>To get started with the Moonbeam XCM SDK, you'll need to first install the SDK:</p> <pre><code>npm install @moonbeam-network/xcm-sdk\n</code></pre> <p>You'll also need to install a few additional dependencies that you'll use to interact with the SDK in this guide. You'll need the Polkadot.js API to create a Polkadot signer:</p> <pre><code>npm install @polkadot/api @polkadot/util-crypto\n</code></pre> <p>You'll also need an Ethereum signer if you're interacting with an Ethereum-compatible chain like Moonbeam. This guide will cover using Ethers.js and viem. You'll need to install whichever library you want to use:</p> <p>=== \"Ethers.js\"</p> <pre><code>```bash\nnpm install ethers@^5.7.2\n```\n</code></pre> <p>=== \"viem\"</p> <pre><code>```bash\nnpm install viem\n```\n</code></pre>"},{"location":"xcm-sdk/#create-signers-create-signers","title":"Create Signers {: #create-signers }","text":"<p>When transferring assets between chains, you'll need signers in place to sign the transactions. If you're interacting with an Ethereum-compatible chain that uses standard Ethereum-style H160 addresses, such as Moonbeam, you'll need to have an Ethereum signer, which can be an Ethers.js{target=_blank} signer or a viem Wallet Client{target=_blank}. To interact with the relay chain or other parachains, you'll need a Polkadot{target=_blank} signer.</p> <p>You can pass, for example, a browser extension wallet as a signer into Ethers{target=_blank} or viem{target=_blank}, such as MetaMask. Similarly, with Polkadot, you can pass a compatible wallet to the signer using the <code>@polkadot/extension-dapp</code> library{target=_blank}.</p> <p>To create an EVM signer and a Polkadot signer, you can refer to the following sections.</p> <p>!!! remember     Never store your private key or mnemonic in a JavaScript or TypeScript file.</p>"},{"location":"xcm-sdk/#create-a-evm-signer-create-a-evm-signer","title":"Create a EVM Signer {: #create-a-evm-signer }","text":"<p>To create an Ethers signer, you can use the following code snippet:</p> <pre><code>import { ethers } from 'ethers';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst provider = new ethers.providers.WebSocketProvider('INSERT_WS_ENDPOINT', {\n  chainId: INSERT_CHAIN_ID,\n  name: 'INSERT_CHAIN_NAME',\n});\nconst evmSigner = new ethers.Wallet(privateKey, provider);\n</code></pre> <p>For Moonbeam specifically, you can use the following configurations:</p> <p>=== \"Moonbeam\"</p> <pre><code>```js\nimport { ethers } from 'ethers';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst provider = new ethers.providers.WebSocketProvider(\n  '{{ networks.moonbeam.wss_url }}', \n  {\n    chainId: {{ networks.moonbeam.chain_id }},\n    name: 'moonbeam',\n  }\n);\nconst evmSigner = new ethers.Wallet(privateKey, provider);\n```\n</code></pre> <p>=== \"Moonriver\"</p> <pre><code>```js\nimport { ethers } from 'ethers';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst provider = new ethers.providers.WebSocketProvider(\n  '{{ networks.moonriver.wss_url }}', \n  {\n    chainId: {{ networks.moonriver.chain_id }},\n    name: 'moonriver',\n  }\n);\nconst evmSigner = new ethers.Wallet(privateKey, provider);\n```\n</code></pre> <p>=== \"Moonbase Alpha\"</p> <pre><code>```js\nimport { ethers } from 'ethers';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst provider = new ethers.providers.WebSocketProvider(\n  '{{ networks.moonbase.wss_url }}',\n  {\n    chainId: {{ networks.moonbase.chain_id }},\n    name: 'moonbase',\n  }\n);\nconst evmSigner = new ethers.Wallet(privateKey, provider);\n```\n</code></pre> <p>Alternatively, you can create a viem Wallet Client to pass as EVM signer:</p> <p>=== \"Moonbeam\"</p> <pre><code>```js\nimport { createWalletClient, http } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts' \nimport { moonbeam } from 'viem/chains';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst account = privateKeyToAccount(privateKey);\n\nconst evmSigner = createWalletClient({\n  account,\n  chain: moonbeam,\n  transport: http(),\n});\n```\n</code></pre> <p>=== \"Moonriver\"</p> <pre><code>```js\nimport { createWalletClient, http } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts' \nimport { moonriver } from 'viem/chains';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst account = privateKeyToAccount(privateKey);\n\nconst evmSigner = createWalletClient({\n  account,\n  chain: moonriver,\n  transport: http(),\n});\n```\n</code></pre> <p>=== \"Moonbase Alpha\"</p> <pre><code>```js\nimport { createWalletClient, http } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts' \nimport { moonbaseAlpha } from 'viem/chains';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst account = privateKeyToAccount(privateKey);\n\nconst evmSigner = createWalletClient({\n  account,\n  chain: moonbaseAlpha,\n  transport: http(),\n});\n```\n</code></pre> <p>If you want to pass in a browser extension wallet to viem, you can use the following code:</p> <p>=== \"Moonbeam\"</p> <pre><code>```js\nimport { createWalletClient, custom } from 'viem';\nimport { moonbeam } from 'viem/chains';\n\nconst evmSigner = createWalletClient({\n  chain: moonbeam,\n  transport: custom(window.ethereum),\n});\n```\n</code></pre> <p>=== \"Moonriver\"</p> <pre><code>```js\nimport { createWalletClient, custom } from 'viem';\nimport { moonriver } from 'viem/chains';\n\nconst evmSigner = createWalletClient({\n  chain: moonriver,\n  transport: custom(window.ethereum),\n});\n```\n</code></pre> <p>=== \"Moonbase Alpha\"</p> <pre><code>```js\nimport { createWalletClient, custom } from 'viem';\nimport { moonbaseAlpha } from 'viem/chains';\n\nconst evmSigner = createWalletClient({\n  chain: moonbaseAlpha,\n  transport: custom(window.ethereum),\n});\n```\n</code></pre> <p>!!! note     --8&lt;-- 'text/_common/endpoint-setup.md'</p>"},{"location":"xcm-sdk/#create-a-polkadot-signer-create-a-polkadot-signer","title":"Create a Polkadot Signer {: #create-a-polkadot-signer }","text":"<p>In this example, you can use a Polkadot.js Keyring{target=_blank} to sign transactions. Please note that this approach is not recommended for production applications.</p> <pre><code>import { Keyring } from '@polkadot/api';\nimport { cryptoWaitReady } from '@polkadot/util-crypto';\nconst privateKey = 'INSERT_PRIVATE_KEY';\nawait cryptoWaitReady();\nconst keyring = new Keyring({\n  ss58Format: 'INSERT_SS58_FORMAT',\n  type: 'sr25519',\n});\nconst pair = keyring.createFromUri(privateKey);\n</code></pre> <p>!!! note     In the above <code>INSERT_PRIVATE_KEY</code> field, you can specify a seed phrase instead of a private key.</p>"},{"location":"xcm-sdk/#get-asset-and-chain-data-asset-chain-data","title":"Get Asset and Chain Data {: #asset-chain-data }","text":"<p>You can use any of the following code examples to retrieve information on the supported assets and the chains that support these assets.</p>"},{"location":"xcm-sdk/#get-list-of-supported-assets-get-list-of-supported-assets","title":"Get List of Supported Assets {: #get-list-of-supported-assets }","text":"<p>To get a list of all of the assets supported by the XCM SDK, you can instantiate the XCM SDK and call the <code>assets</code> function.</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\n\nconst sdkInstance = new Sdk();\nconst assets = sdkInstance.assets();\n\nconsole.log('The supported assets are as follows:');\nassets.assets.forEach((asset) =&gt; {\n  console.log(`- ${asset.originSymbol}`);\n});\n</code></pre>"},{"location":"xcm-sdk/#get-list-of-supported-assets-by-ecosystem-get-supported-assets-by-ecosystem","title":"Get List of Supported Assets by Ecosystem {: #get-supported-assets-by-ecosystem }","text":"<p>To get a list of the supported assets for a particular ecosystem, you can pass in the ecosystem name: <code>polkadot</code>, <code>kusama</code>, or <code>alphanet-relay</code>. For example, the following snippet will get all of the Polkadot assets supported:</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\n\nconst sdkInstance = new Sdk();\nconst assets = sdkInstance.assets('polkadot');\n\nconsole.log('The supported assets within the Polkadot ecosystem are as follows:');\nassets.assets.forEach((asset) =&gt; {\n  console.log(`- ${asset.originSymbol}`);\n});\n</code></pre>"},{"location":"xcm-sdk/#get-list-of-supported-chains-by-asset-get-list-of-supported-assets-by-chain","title":"Get List of Supported Chains by Asset {: #get-list-of-supported-assets-by-chain }","text":"<p>To get a list of the supported source and destination chains for a given asset, you can use the following code snippet, which logs the supported chains by asset for all of the supported assets in the Polkadot ecosystem:</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\n\nconst sdkInstance = new Sdk();\nconst assets = sdkInstance.assets('polkadot');\n\nassets.assets.forEach((asset) =&gt; {\n  const { sourceChains, source } = assets.asset(asset);\n  console.log(`You can send ${asset.originSymbol}...`);\n  if (sourceChains.length &gt; 1) {\n    sourceChains.forEach((sourceChain) =&gt; {\n      const { destinationChains } = source(sourceChain);\n      if (destinationChains.length &gt; 0) {\n        destinationChains.forEach((destination) =&gt; {\n          console.log(`- From ${source.name} to ${destination.name}`);\n        });\n      }\n    });\n  }\n});\n</code></pre>"},{"location":"xcm-sdk/#build-xcm-transfer-data-build-xcm-transfer-data","title":"Build XCM Transfer Data {: #build-xcm-transfer-data }","text":"<p>In order to transfer an asset from one chain to another, you'll need to first build the transfer data, which defines the asset to be transferred, the source chain and address, the destination chain and address, and the associated signer for the transaction. Building the transfer data is the first step; in the next section, you'll learn how to use the transfer data to actually transfer the asset.</p> <p>To get started, you'll use the <code>Sdk</code> function, which will expose two methods for building the XCM transfer data: <code>assets</code> and <code>getTransferData</code>.</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\n\nconst sdkInstance = new Sdk();\n</code></pre> <p>You can choose either method, as both will return the data necessary to initiate an asset transfer between the source chain and the destination chain. Using <code>assets</code> will provide additional data along the way, including the list of supported assets and, once an asset is selected, the supported source and destination chains that are able to send and receive the asset.</p> <p>The process for using <code>assets</code> to build the transfer data is as follows:</p> <ol> <li> <p>Call the <code>assets</code> function and optionally pass in the ecosystem that you want to retrieve a list of assets for or that the asset you want to transfer belongs to. The available ecosystems are: <code>polkadot</code>, <code>kusama</code>, and <code>alphanet-relay</code>. For example:</p> <p><code>js const { assets, asset } = sdkInstance.assets('polkadot');</code></p> <p>This will return a list of the supported assets and the <code>asset</code> function that can be used to define the asset to be transferred</p> </li> <li> <p>Call the <code>asset</code> function and pass in the key or asset object (which includes the key and the origin symbol) to define the asset to be transferred. For example:</p> <p><code>js // Using the key const { sourceChains, source } = asset('dot');</code></p> <p>This will return a list of the supported source chains and the <code>source</code> function, which is used to define the source chain to transfer the asset from</p> </li> <li> <p>Call the <code>source</code> function and pass in the key or the chain object (which includes the key, name, and chain type). For example:</p> <p><code>js // Using the key const { destinationChains, destination } = source('polkadot');</code></p> <p>This will return a list of the supported destination chains where there is an open XCM channel from the source chain for the given asset and the <code>destination</code> function, which is used to define the destination chain to transfer the asset to</p> </li> <li> <p>Call the <code>destination</code> function and pass in the key or the chain object (which includes the key, name, and chain type). For example:</p> <p><code>js // Using the key const { accounts } = destination('moonbeam');</code></p> <p>This will return the <code>accounts</code> function, which is used to define the source and destination addresses and the associated signers for each address</p> </li> </ol> <p>The asset and chain objects are managed within the <code>@moonbeam-network/xcm-config</code> package. You do not need to directly interact with this package as the SDK exposes this data, but there you can find the list of assets{target=_blank} and chain data{target=_blank}.</p> <p>An example of the steps described above to build the transfer data to transfer DOT from the Polkadot relay chain to Moonbeam is as follows:</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\n\nconst sdkInstance = new Sdk();\n\nconst fromPolkadot = async () =&gt; {\n  const { assets, asset } = sdkInstance.assets();\n  console.log(\n    `The supported assets are: ${assets.map((asset) =&gt; asset.originSymbol)}`\n  );\n\n  const { sourceChains, source } = asset('dot');\n  console.log(\n    `The supported source chains are: ${sourceChains.map(\n      (chain) =&gt; chain.name\n    )}`\n  );\n\n  const { destinationChains, destination } = source('polkadot');\n  console.log(\n    `The supported destination chains are: ${destinationChains.map(\n      (chain) =&gt; chain.name\n    )}`\n  );\n\n  const { accounts } = destination('moonbeam');\n  const data = await accounts(\n    pair.address,\n    evmSigner.address, // If using viem, use evmSigner.account.address\n    {\n      evmSigner,\n      polkadotSigner: pair,\n    }\n  );\n};\n\nfromPolkadot();\n</code></pre> <p>!!! note     For more information on each of the <code>Sdk().assets()</code> builder functions, including the parameters and returned data, please refer to the XCM SDK Reference{target=_blank}.</p> <p>If you don't need any of the asset or chain information, you can use the <code>getTransferData</code> function:</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\n\nconst sdkInstance = new Sdk();\n\nconst fromPolkadot = async () =&gt; {\n  const data = await sdkInstance.getTransferData({\n    destinationAddress: evmSigner.address, // If using viem, use evmSigner.account.address\n    destinationKeyOrChain: 'moonbeam',\n    keyOrAsset: 'dot',\n    polkadotSigner: pair,\n    sourceAddress: pair.address,\n    sourceKeyOrChain: 'polkadot',\n    evmSigner,\n  });\n};\n\nfromPolkadot();\n</code></pre> <p>!!! note     For more information on the <code>Sdk().getTransferData()</code> function, including the parameters and returned data, please refer to the XCM SDK Reference{target=_blank}.</p> <p>As previously mentioned, regardless of which method you use to build the transfer data, you'll generate the same output.</p> <p>??? code \"Example response\"</p> <pre><code>```js\n// Send DOT from Polkadot to Moonbeam\n// data\n{\n  destination: {\n    balance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    chain: l {\n      ecosystem: 'polkadot',\n      isTestChain: false,\n      key: 'moonbeam',\n      name: 'Moonbeam',\n      type: 'evm-parachain',\n      assetsData: [Map],\n      genesisHash: '0xfe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d',\n      parachainId: 2004,\n      ss58Format: 1284,\n      usesChainDecimals: false,\n      weight: 1000000000,\n      ws: 'wss://wss.api.moonbeam.network',\n      id: 1284,\n      rpc: 'https://rpc.api.moonbeam.network'\n    },\n    existentialDeposit: e {\n      key: 'glmr',\n      originSymbol: 'GLMR',\n      amount: 0n,\n      decimals: 18,\n      symbol: 'GLMR'\n    },\n    fee: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 33068783n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    min: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    }\n  },\n  getEstimate: [Function: getEstimate],\n  isSwapPossible: true,\n  max: e {\n    key: 'dot',\n    originSymbol: 'DOT',\n    amount: 0n,\n    decimals: 10,\n    symbol: 'DOT'\n  },\n  min: e {\n    key: 'dot',\n    originSymbol: 'DOT',\n    amount: 33068783n,\n    decimals: 10,\n    symbol: 'DOT'\n  },\n  source: {\n    balance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    chain: m {\n      ecosystem: 'polkadot',\n      isTestChain: false,\n      key: 'polkadot',\n      name: 'Polkadot',\n      type: 'parachain',\n      assetsData: Map(0) {},\n      genesisHash: '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3',\n      parachainId: 0,\n      ss58Format: 0,\n      usesChainDecimals: false,\n      weight: 1000000000,\n      ws: 'wss://rpc.polkadot.io'\n    },\n    destinationFeeBalance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    existentialDeposit: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 10000000000n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    fee: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 169328990n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    feeBalance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    max: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    min: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    }\n  },\n  swap: [AsyncFunction: swap],\n  transfer: [AsyncFunction: transfer]\n}\n```\n</code></pre> <p>As you may have noticed in the example response, the transfer data contains information on the asset to be transferred, the source chain, and the destination chain. In addition, a few functions have been exposed:</p> <ul> <li><code>swap()</code> - returns the transfer data necessary to swap the asset from the destination chain back to the source chain</li> <li><code>transfer()</code> - transfers a given amount of the asset from the source chain to the destination chain</li> <li><code>getEstimate()</code> - returns an estimated amount of the asset that will be received on the destination chain, less any destination fees</li> </ul>"},{"location":"xcm-sdk/#transfer-an-asset-transfer-an-asset","title":"Transfer an Asset {: #transfer-an-asset }","text":"<p>Now that you've built the transfer data, you can go ahead and transfer the asset from the source chain to the destination chain. To do so, you can use the <code>transfer</code> function, but first you'll need to specify an amount to send. You can specify the amount in integer or decimal format. For example, if you wanted to send 0.1 DOT, you could use <code>1000000000n</code> or <code>'0.1'</code>. You can use asset conversion methods{target=_blank}, like <code>toDecimal</code> to convert the asset to decimal format.</p> <p>For this example, you can transfer twice the minimum amount required of DOT:</p> <pre><code>...\n\nconst amount = data.min.toDecimal() * 2;\nconsole.log(`Sending from ${data.source.chain.name} amount: ${amount}`);\nconst hash = await data.transfer(amount);\nconsole.log(`${data.source.chain.name} tx hash: ${hash}`);\n</code></pre> <p>As seen in the above snippet, the <code>transfer</code> function returns a transaction hash on the source chain.</p> <p>!!! note     For more information on the parameters and returned data for <code>transfer</code>, please refer to the XCM SDK Reference{target=_blank}.</p>"},{"location":"xcm-sdk/#swap-an-asset-swap-an-asset","title":"Swap an Asset {: #swap-an-asset}","text":"<p>To swap an asset, you can use the same transfer data and call <code>data.swap()</code> to switch the source and destination chain information. From there, you can simply call the <code>transfer</code> function to execute the swap.</p> <pre><code>...\n\nconst swapData = await data.swap();\nconst amount = swapData.min.toDecimal() * 2;\nconsole.log(`Sending from ${swapData.source.chain.name} amount: ${amount}`);\nconst hash = await swapData.transfer(amount);\nconsole.log(`${swapData.source.chain.name} tx hash: ${hash}`);\n</code></pre> <p>The <code>swap</code> function returns the transfer data with the original source chain and destination chain swapped. Using the previous example of sending DOT from Polkadot to Moonbeam, the swap transfer data would send DOT from Moonbeam to Polkadot.</p> <p>??? code \"Example response\"</p> <pre><code>```js\n// swapData\n{\n  destination: {\n    balance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    chain: m {\n      ecosystem: 'polkadot',\n      isTestChain: false,\n      key: 'polkadot',\n      name: 'Polkadot',\n      type: 'parachain',\n      assetsData: Map(0) {},\n      genesisHash: '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3',\n      parachainId: 0,\n      ss58Format: 0,\n      usesChainDecimals: false,\n      weight: 1000000000,\n      ws: 'wss://rpc.polkadot.io'\n    },\n    existentialDeposit: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 10000000000n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    fee: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 169328990n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    feeBalance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    max: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    min: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    }\n  },\n  getEstimate: [Function: getEstimate],\n  isSwapPossible: true,\n  max: e {\n    key: 'dot',\n    originSymbol: 'DOT',\n    amount: 0n,\n    decimals: 10,\n    symbol: 'DOT'\n  },\n  min: e {\n    key: 'dot',\n    originSymbol: 'DOT',\n    amount: 33068783n,\n    decimals: 10,\n    symbol: 'DOT'\n  },\n  source: {\n    balance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    chain: l {\n      ecosystem: 'polkadot',\n      isTestChain: false,\n      key: 'moonbeam',\n      name: 'Moonbeam',\n      type: 'evm-parachain',\n      assetsData: [Map],\n      genesisHash: '0xfe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d',\n      parachainId: 2004,\n      ss58Format: 1284,\n      usesChainDecimals: false,\n      weight: 1000000000,\n      ws: 'wss://wss.api.moonbeam.network',\n      id: 1284,\n      rpc: 'https://rpc.api.moonbeam.network'\n    },\n    destinationFeeBalance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    existentialDeposit: e {\n      key: 'glmr',\n      originSymbol: 'GLMR',\n      amount: 0n,\n      decimals: 18,\n      symbol: 'GLMR'\n    },\n    fee: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 33068783n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    min: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    }\n  },\n  swap: [AsyncFunction: swap],\n  transfer: [AsyncFunction: transfer]\n}\n```\n</code></pre> <p>!!! note     For more information on the parameters and returned data for <code>swap</code>, please refer to the XCM SDK Reference{target=_blank}.</p>"},{"location":"xcm-sdk/#get-an-estimate-of-the-asset-to-be-received-on-the-destination-chain-get-estimate","title":"Get an Estimate of the Asset to be Received on the Destination Chain {: #get-estimate }","text":"<p>When you send an XCM message, you typically pay fees on the destination chain to execute the XCM instructions. Before you transfer the asset, you can use the <code>getEstimate</code> function to calculate an estimated amount of the asset that will be received on the destination chain, minus any fees.</p> <p>The <code>getEstimate</code> function is tied to a specific transfer request as it is based on the asset being transferred and the destination chain fees, so you'll need to create the transfer data first.</p> <p>You'll need to provide the amount to be transferred to the <code>getEstimate</code> function. In the following example, you'll get the estimated amount of DOT that will be received on Moonbeam when 0.1 DOT is transferred. You can specify the amount in integer (<code>1000000000n</code>) or decimal (<code>'0.1'</code>) format.</p> <pre><code>...\n\nconst amount = '0.1';\nconst estimatedAmount = data.getEstimate(amount);\n\nconsole.log(\n  `The estimated amount of ${\n    data.source.balance.originSymbol\n  } to be received on ${\n    data.destination.chain.name\n  } is: ${estimatedAmount.toDecimal()} ${data.destination.balance.symbol}`\n);\n</code></pre> <p>The <code>getEstimate</code> function returns the estimated amount along with information on the asset being transferred.</p> <p>??? code \"Example response\"</p> <pre><code>```js\n// estimatedAmount\n{\n  key: 'dot',\n  originSymbol: 'DOT',\n  amount: 966931217n,\n  decimals: 10,\n  symbol: 'DOT'\n}\n```\n</code></pre> <p>!!! note     For more information on the parameters and returned data for <code>getEstimate</code>, please refer to the XCM SDK Reference{target=_blank}.</p>"},{"location":"xcm-sdk/#get-transfer-minimum-and-maximum-amounts-transfer-min-max-amounts","title":"Get Transfer Minimum and Maximum Amounts {: #transfer-min-max-amounts }","text":"<p>You can use transfer data to retrieve the minimum and maximum amount of an asset that can be transferred. To do so, you'll access the <code>min</code> and <code>max</code> properties of the asset being transferred:</p> <p>=== \"Minimum\"</p> <pre><code>```js\n...\n\nconst amount = data.min.toDecimal();\nconst symbol = data.min.originSymbol;\n\nconsole.log(`You can send min: ${amount} ${symbol}`);\n```\n</code></pre> <p>=== \"Maximum\"</p> <pre><code>```js\n...\n\nconst amount = data.max.toDecimal();\nconst symbol = data.max.originSymbol;\n\nconsole.log(`You can send max: ${amount} ${symbol}`);\n```\n</code></pre> <p>The <code>min</code> and <code>max</code> properties return the minimum and maximum amount of the asset that can be transferred, along with information on the asset. If the source account does not hold a balance of the chosen asset, the <code>data.max</code> amount will be <code>0n</code>.</p> <p>??? code \"Example response\"</p> <pre><code>```js\n// data.min\n{\n  key: 'dot',\n  originSymbol: 'DOT',\n  amount: 33068783n,\n  decimals: 10,\n  symbol: 'DOT'\n}\n// data.max\n{\n  key: 'dot',\n  originSymbol: 'DOT',\n  amount: 0n,\n  decimals: 10,\n  symbol: 'DOT'\n}\n```\n</code></pre> <p>!!! note     For more information on assets and asset amounts, please refer to the XCM SDK Reference{target=_blank}.</p>"},{"location":"xcm-sdk/#get-transfer-fees-get-transfer-fees","title":"Get Transfer Fees {: #get-transfer-fees }","text":"<p>The transfer data provides information on transfer fees for the source and destination chains. You can retrieve the fees using the following snippet:</p> <pre><code>...\nconst sourceChain = data.source.chain.name;\nconst sourceFee = data.source.fee;\n\nconst destinationChain = data.destination.chain.name;\nconst destinationFee = data.destination.fee;\n\nconsole.log(\n  `You will pay ${sourceFee.toDecimal()} ${\n    sourceFee.symbol\n  } fee on ${\n    sourceChain\n  } and ${destinationFee.toDecimal()} ${\n    destinationFee.symbol\n  } fee on ${destinationChain}.`\n);\n</code></pre> <p>The <code>fee</code> property returns the amount of fees to be paid along with information on the asset.</p> <p>??? code \"Example response\"</p> <pre><code>```js\n// sourceFee\n{\n  key: 'dot',\n  originSymbol: 'DOT',\n  amount: 169328990n,\n  decimals: 10,\n  symbol: 'DOT'\n}\n// destinationFee\n{\n  key: 'dot',\n  originSymbol: 'DOT',\n  amount: 33068783n,\n  decimals: 10,\n  symbol: 'DOT'\n}\n```\n</code></pre> <p>!!! note     For more information on assets and asset amounts, including fees, please refer to the XCM SDK Reference{target=_blank}.</p> <p>--8&lt;-- 'text/_disclaimers/third-party-content.md'</p>"}]}