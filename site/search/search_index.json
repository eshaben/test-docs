{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"reference/","title":"Moonbeam XCM SDK Reference: v0","text":""},{"location":"reference/#introduction-introduction","title":"Introduction {: #introduction }","text":"<p>The Moonbeam XCM SDK enables developers to easily deposit and withdraw assets to Moonbeam/Moonriver from the relay chain and other parachains in the Polkadot/Kusama ecosystem. With the SDK, you don't need to worry about determining the multilocation of the origin or destination assets or which extrinsics are used on which networks to send XCM transfers.</p> <p>The SDK provides an API which includes a series of interfaces to get asset information for each of the supported assets, chain information for the initialized network, utility methods, and methods to enable deposits, withdrawals, and subscription to balance information.</p> <p>This page includes a list of the interfaces and methods available in the XCM SDK for v0. For information on how to use the XCM SDK interfaces and methods, please refer to the Using the XCM SDK for v0{target=_blank} guide.</p> <p>If you're using v1.x, please refer to the SDK guides specific to v1{target=_blank}.</p>"},{"location":"reference/#core-interfaces-core-sdk-interfaces","title":"Core Interfaces {: #core-sdk-interfaces }","text":"<p>The SDK provides the following core interfaces, which can be accessed after initialization{target=_blank}:</p> Interface Description <code>symbols</code>{target=_blank} A list containing the asset's origin chain symbol for each of the supported assets for the initialized Moonbeam network <code>assets</code>{target=_blank} A list of the supported assets for the initialized Moonbeam network along with their asset ID, precompiled address on Moonbeam, and the asset symbol <code>moonAsset</code>{target=_blank} Contains the asset ID, precompile contract address, and native asset symbol for the initialized Moonbeam network <code>moonChain</code>{target=_blank} Contains the chain key, name, WSS endpoint, parachain ID, decimals of the native asset, chain ID, and units per second for the initialized Moonbeam network"},{"location":"reference/#core-methods-core-sdk-methods","title":"Core Methods {: #core-sdk-methods }","text":"<p>The SDK provides the following core methods:</p> Method Description <code>init()</code>{target=_blank} Initializes the XCM SDK. Must be called first before any other SDK methods <code>deposit()</code>{target=_blank} Initiates a deposit to transfer assets from another chain to Moonbeam <code>withdraw()</code>{target=_blank} Initiates a withdraw to transfer assets from Moonbeam to another chain <code>subscribeToAssetsBalanceInfo()</code>{target=_blank} Listens for balance changes for a given account for each of the supported assets <code>isXcmSdkDeposit()</code>{target=_blank} Returns a boolean indicating whether the given transfer data is for a deposit or not <code>isXcmSdkWithdraw()</code>{target=_blank} Returns a boolean indicating whether the given transfer data is for a withdraw or not <code>toDecimal()</code>{target=_blank} Returns a given balance in decimal format <code>toBigInt()</code>{target=_blank} Returns a given decimal in BigInt format"},{"location":"reference/#deposit-methods-deposit-methods","title":"Deposit Methods {: #deposit-methods }","text":"<p>When building the transfer data needed for a deposit, you'll use multiple methods to build the underlying XCM message and send it:</p> Method Description <code>deposit()</code>{target=_blank} Initiates a deposit to transfer assets from another chain to Moonbeam <code>from()</code>{target=_blank} Sets the source chain where the deposit will originate from.  This function is returned from the <code>deposit()</code> function.  Must call <code>deposit()</code> first <code>get()</code>{target=_blank} Sets the account on Moonbeam to deposit the funds to and the  source account where the deposit will be sent from.  This function is returned from the <code>from()</code> function.  Must call <code>from()</code> first <code>send()</code>{target=_blank} Sends the deposit transfer data given an amount to send.  This function is returned from the <code>get()</code> function.  Must call <code>get()</code> first <code>getFee()</code>{target=_blank} Returns an estimate of the fee for transferring a given amount,  which will be paid in the asset specified in the <code>deposit()</code> function.  This function is returned from the <code>get()</code> function.  Must call <code>get()</code> first"},{"location":"reference/#withdraw-methods-withdraw-methods","title":"Withdraw Methods {: #withdraw-methods }","text":"<p>When building the transfer data needed for a withdraw, you'll use multiple methods to build the underlying XCM message and send it:</p> Method Description <code>withdraw()</code>{target=_blank} Initiates a withdraw to transfer assets from Moonbeam to another chain <code>to()</code>{target=_blank} Sets the destination chain where the assets will be withdrawn to.  This function is returned from the <code>withdraw()</code> function.  Must call <code>withdraw()</code> first <code>get()</code>{target=_blank} Sets the account on the destination chain to send the withdrawn funds to.  This function is returned from the <code>to()</code> function.  Must call <code>to()</code> first <code>send()</code>{target=_blank} Sends the withdraw transfer data given an amount to send.  This function is returned from the <code>get()</code> function.  Must call <code>get()</code> first <code>getFee()</code>{target=_blank} Returns an estimate of the fee for transferring a given amount,  which will be paid in the asset specified in the <code>withdraw()</code> function.  This function is returned from the <code>get()</code> function.  Must call <code>get()</code> first"},{"location":"xcm-sdk/","title":"Using the Moonbeam XCM SDK: v0","text":""},{"location":"xcm-sdk/#introduction-introduction","title":"Introduction {: #introduction }","text":"<p>The Moonbeam XCM SDK enables developers to easily deposit and withdraw assets to Moonbeam/Moonriver from the relay chain and other parachains in the Polkadot/Kusama ecosystem. With the SDK, you don't need to worry about determining the multilocation of the origin or destination assets or which extrinsics are used on which networks to send XCM transfers. To deposit or withdraw assets, you simply define the asset and origin chain you want to deposit from or withdraw back to, along with the sending account's signer, and the amount to send.</p> <p>The XCM SDK offers simple helper functions like <code>deposit</code> and <code>withdraw</code>, that provide a very simple interface to execute XCM transfers between chains in the Polkadot/Kusama ecosystem. In addition, the XCM config package allows any parachain project to add their information in a standard way, so they can be immediately supported by the XCM SDK.</p> <p>For an overview of the available methods and interfaces in the Moonbeam XCM SDK, please refer to the Reference for v0{target=_blank} page.</p> <p>If you're using v1.x, please refer to the SDK guides specific to v1{target=_blank}.</p> <p>The examples in this guide are shown on Moonbeam, but can be adapted to be used on Moonriver or Moonbase Alpha.</p>"},{"location":"xcm-sdk/#getting-started-getting-started","title":"Getting Started {: #getting-started }","text":"<p>To get started with the XCM SDK, you'll first need to install the corresponding NPM package. Next, you'll also need to create signers to be used to sign transactions to transfer assets between Moonbeam and another chain within the Polkadot ecosystem. Lastly, you'll need to initialize the API which will provide you with asset and chain information and the necessary functions to deposit, withdraw, and subscribe to balance information.</p>"},{"location":"xcm-sdk/#installation-installation","title":"Installation {: #installation }","text":"<p>For the purposes of this guide you'll need to install two packages: the XCM SDK package, and the XCM config package.</p> <p>The XCM SDK package will enable you to easily deposit and withdraw assets, and subscribe to balance information for each of the supported assets.</p> <p>The XCM config package will be used to obtain origin asset and chain information for each of the supported assets. The config package also includes native asset and chain information for each of the Moonbeam-based networks, as well as some underlying functions of the SDK.</p> <p>To install the XCM SDK and XCM config packages, you can run the following command:</p> <pre><code>npm install @moonbeam-network/xcm-sdk @moonbeam-network/xcm-config\n</code></pre> <p>You need to have peer dependencies, like Ethers.js{target=_blank} and the Polkadot.js API{target=_blank} installed.</p> <p>You can install them by running the following command:</p> <pre><code>npm i @polkadot/api-augment @polkadot/types @polkadot/util @polkadot/util-crypto ethers\n</code></pre> <p>!!! note     There is a known issue{target=_blank} when using the Moonbeam XCM packages alongside Polkadot.js with Node.js (JavaScript) that will cause package conflict warnings to appear in the console. Using TypeScript is recommended.</p>"},{"location":"xcm-sdk/#creating-signers-creating-signers","title":"Creating Signers {: creating-signers }","text":"<p>When interacting with the <code>deposit</code> and <code>withdraw</code> functions of the XCM SDK, you'll need to provide an Ethers.js{target=_blank} and Polkadot.js{target=_blank} signer, which will be used to sign and send the transactions. The Ethers signer is used to sign transactions on Moonbeam, and the Polkadot signer will be used to sign transactions on the origin chain you're depositing assets from.</p> <p>You can pass, for example, a MetaMask signer into Ethers{target=_blank} or another compatible wallet. Similarly with Polkadot, you can pass a compatible wallet to the signer using the <code>@polkadot/extension-dapp</code> library{target=_blank}.</p> <p>To create a signer for Ethers.js and Polkadot.js, you can refer to the following code snippets. In this example, you can use a Polkadot.js Keyring to sign transactions on the origin chain for deposits. Please note that this approach is not recommended for production applications. Never store your private key or mnemonic in a JavaScript or TypeScript file.</p> <p>=== \"Moonbeam\"</p> <pre><code>```js\nimport { ethers } from 'ethers';\nimport { Keyring } from '@polkadot/api';\n\n// Set up Ethers provider and signer\nconst providerRPC = {\n  moonbeam: {\n    name: 'moonbeam',\n    rpc: '{{ networks.moonbeam.rpc_url }}',\n    chainId: {{ networks.moonbeam.chain_id }}, // {{ networks.moonbeam.hex_chain_id }} in hex,\n  },\n};\nconst provider = new ethers.JsonRpcProvider(providerRPC.moonbeam.rpc, {\n  chainId: providerRPC.moonbeam.chainId,\n  name: providerRPC.moonbeam.name,\n});\nconst ethersSigner = new ethers.Wallet('INSERT_PRIVATE_KEY', provider);\n\n// Set up Polkadot keyring\nconst keyring = new Keyring({ type: 'sr25519' });\nconst polkadotKeyring = keyring.addFromUri(mnemonic);\n```\n</code></pre> <p>=== \"Moonriver\"</p> <pre><code>```js\nimport { ethers } from 'ethers';\nimport { Keyring } from '@polkadot/api';\n\n// Set up Ethers provider and signer\nconst providerRPC = {\n  moonriver: {\n    name: 'moonriver',\n    rpc: '{{ networks.moonriver.rpc_url }}',\n    chainId: {{ networks.moonriver.chain_id }}, // {{ networks.moonriver.hex_chain_id }} in hex,\n  },\n};\nconst provider = new ethers.JsonRpcProvider(providerRPC.moonriver.rpc, {\n  chainId: providerRPC.moonriver.chainId,\n  name: providerRPC.moonriver.name,\n});\nconst ethersSigner = new ethers.Wallet('INSERT_PRIVATE_KEY', provider);\n\n// Set up Polkadot keyring\nconst keyring = new Keyring({ type: 'sr25519' });\nconst polkadotKeyring = keyring.addFromUri('INSERT_MNEMONIC');\n```\n</code></pre> <p>=== \"Moonbase Alpha\"</p> <pre><code>```js\nimport { ethers } from 'ethers';\nimport { Keyring } from '@polkadot/api';\n\n// Set up Ethers provider and signer\nconst providerRPC = {\n  moonbase: {\n    name: 'moonbase-alpha',\n    rpc: '{{ networks.moonbase.rpc_url }}',\n    chainId: {{ networks.moonbase.chain_id }}, // {{ networks.moonbase.hex_chain_id }} in hex,\n  },\n};\nconst provider = new ethers.JsonRpcProvider(providerRPC.moonbase.rpc, {\n  chainId: providerRPC.moonbase.chainId,\n  name: providerRPC.moonbase.name,\n});\nconst ethersSigner = new ethers.Wallet('INSERT_PRIVATE_KEY', provider);\n\n// Set up Polkadot keyring\nconst keyring = new Keyring({ type: 'sr25519' });\nconst polkadotKeyring = keyring.addFromUri('INSERT_MNEMONIC');\n```\n</code></pre>"},{"location":"xcm-sdk/#initialization-initializing","title":"Initialization {: #initializing }","text":"<p>To be able to deposit, withdraw, and subscribe to balance information for all of the supported assets, you'll need to start off by importing the <code>init</code> function from the XCM SDK and call it:</p> <p>=== \"Moonbeam\"</p> <pre><code>```js\nimport { init } from '@moonbeam-network/xcm-sdk';\nconst { moonbeam } = init();\n```\n</code></pre> <p>=== \"Moonriver\"</p> <pre><code>```js\nimport { init } from '@moonbeam-network/xcm-sdk';\nconst { moonriver } = init();\n```\n</code></pre> <p>=== \"Moonbase Alpha\"</p> <pre><code>```js\nimport { init } from '@moonbeam-network/xcm-sdk';\nconst { moonbase } = init();\n```\n</code></pre> <p>If you intend to support a specific wallet, you can pass a signer into the <code>init</code> function right away. Otherwise, you'll be able to pass a signer directly when building the transfer data for a deposit or withdraw. To pass in a signer for Ethers{target=_blank} and Polkadot{target=_blank}, you can use the following snippet:</p> <p>=== \"Moonbeam\"</p> <pre><code>```js\nimport { init } from '@moonbeam-network/xcm-sdk';\nconst { moonbeam } = init({\n  ethersSigner: 'INSERT_ETHERS_SIGNER',\n  polkadotSigner: 'INSERT_POLKADOT_SIGNER',\n});\n```\n</code></pre> <p>=== \"Moonriver\"</p> <pre><code>```js\nimport { init } from '@moonbeam-network/xcm-sdk';\nconst { moonriver } = init({\n  ethersSigner: 'INSERT_ETHERS_SIGNER',\n  polkadotSigner: 'INSERT_POLKADOT_SIGNER',\n});\n```\n</code></pre> <p>=== \"Moonbase Alpha\"</p> <pre><code>```js\nimport { init } from '@moonbeam-network/xcm-sdk';\nconst { moonbase } = init({\n  ethersSigner: 'INSERT_ETHERS_SIGNER',\n  polkadotSigner: 'INSERT_POLKADOT_SIGNER',\n});\n```\n</code></pre>"},{"location":"xcm-sdk/#using-the-sdk-interfaces-using-the-api","title":"Using the SDK Interfaces {: #using-the-api }","text":"<p>The Moonbeam SDK provides an API which includes a series of interfaces{target=_blank} to get asset information for each of the supported assets, chain information for the initialized network, and functions to enable deposits, withdrawals, and subscription to balance information.</p> <p>Make sure you have initialized the Moonbeam network you want to interact with first.</p>"},{"location":"xcm-sdk/#asset-symbols-symbols","title":"Asset Symbols {: #symbols }","text":"<p>An asset symbol refers to the symbol of the asset on the origin chain. For example, <code>GLMR</code> is the native asset on Moonbeam.</p> <p>To get a list of the supported asset symbols for each network, you can access the <code>symbols</code> property:</p> <p>=== \"Moonbeam\"</p> <pre><code>```js\nmoonbeam.symbols\n```\n</code></pre> <p>=== \"Moonriver\"</p> <pre><code>```js\nmoonriver.symbols\n```\n</code></pre> <p>=== \"Moonbase Alpha\"</p> <pre><code>```js\nmoonbase.symbols\n```\n</code></pre> <p>An example of the data contained in the <code>symbols</code> property is as follows:</p> <pre><code>[ 'ACA', 'ASTR', 'AUSD', 'DOT', 'GLMR', 'IBTC', 'INTR', 'PARA', 'PHA']\n</code></pre>"},{"location":"xcm-sdk/#assets-assets","title":"Assets {: #assets }","text":"<p>To get a list of the supported assets along with their asset ID, precompiled contract address on Moonbeam, and their origin asset symbols, you can access the <code>assets</code> property:</p> <p>=== \"Moonbeam\"</p> <pre><code>```js\nmoonbeam.assets\n```\n</code></pre> <p>=== \"Moonriver\"</p> <pre><code>```js\nmoonriver.assets\n```\n</code></pre> <p>=== \"Moonbase Alpha\"</p> <pre><code>```js\nmoonbase.assets\n```\n</code></pre> <p>An example of the data contained in the <code>assets</code> property is as follows:</p> <pre><code>assets: {\n  ACA: {\n    id: '224821240862170613278369189818311486111',\n    erc20Id: '0xffffffffa922fef94566104a6e5a35a4fcddaa9f',\n    originSymbol: 'ACA'\n  },\n  ASTR: {\n    id: '224077081838586484055667086558292981199',\n    erc20Id: '0xffffffffa893ad19e540e172c10d78d4d479b5cf',\n    originSymbol: 'ASTR'\n  },\n  ...\n}\n</code></pre> <p>Where the <code>id</code> refers to the asset ID, the <code>erc20id</code> refers to the asset's precompiled contract address, and the <code>originSymbol</code> refers to the asset's symbol on the origin chain.</p>"},{"location":"xcm-sdk/#moonbeam-native-asset-data-native-assets","title":"Moonbeam Native Asset Data {: #native-assets }","text":"<p>To get information about each of the Moonbeam network's native protocol asset, such as the precompile contract address{target=_blank} and the origin symbol, you can access the <code>moonAsset</code> property:</p> <p>=== \"Moonbeam\"</p> <pre><code>```js\nmoonbeam.moonAsset\n```\n</code></pre> <p>=== \"Moonriver\"</p> <pre><code>```js\nmoonriver.moonAsset\n```\n</code></pre> <p>=== \"Moonbase Alpha\"</p> <pre><code>```js\nmoonbase.moonAsset\n```\n</code></pre> <p>An example of the data contained in the <code>moonAsset</code> property is as follows:</p> <pre><code>moonAsset: {\n  id: '',\n  erc20Id: '{{ networks.moonbeam.precompiles.erc20 }}',\n  originSymbol: 'GLMR',\n  isNative: true\n}\n</code></pre> <p>Where the <code>erc20Id</code> refers to the precompile contract address on Moonbeam, the <code>originSymbol</code> is the symbol for the native asset, and <code>isNative</code> is a boolean indicating whether the asset is a native asset.</p>"},{"location":"xcm-sdk/#moonbeam-native-chain-data-native-chain-data","title":"Moonbeam Native Chain Data {: #native-chain-data }","text":"<p>To get information about each of the Moonbeam network's chain information including the chain key, name, WSS endpoint, parachain ID, protocol asset symbols, chain ID, and units per second, you can access the <code>moonChain</code> property:</p> <p>=== \"Moonbeam\"</p> <pre><code>```js\nmoonbeam.moonChain\n```\n</code></pre> <p>=== \"Moonriver\"</p> <pre><code>```js\nmoonriver.moonChain\n```\n</code></pre> <p>=== \"Moonbase Alpha\"</p> <pre><code>```js\nmoonbase.moonChain\n```\n</code></pre> <p>An example of the data contained in the <code>moonChain</code> property is as follows:</p> <pre><code>moonChain: {\n  key: 'Moonbeam',\n  name: 'Moonbeam',\n  ws: 'wss://wss.api.moonbeam.network',\n  parachainId: 2004,\n  decimals: 18,\n  chainId: 1284,\n  unitsPerSecond: 10000000000000000000n\n}\n</code></pre> <p>Here, the units per second refer to units of token (in this case Wei) that is charged per second of execution of the XCM message. You can find more information in the XCM fees page{target=_blank}.</p>"},{"location":"xcm-sdk/#using-the-sdk-methods-using-the-sdk-methods","title":"Using the SDK Methods {: #using-the-sdk-methods }","text":"<p>The Moonbeam SDK provides an API that includes functions{target=_blank} which enable deposits, withdrawals, and subscription to balance information, in addition to a few utility functions.</p> <p>Make sure you have initialized the Moonbeam network you want to interact with first. You'll also need to make sure you've created signers in order to sign and send deposit and withdraw transfer data.</p>"},{"location":"xcm-sdk/#deposit-deposit","title":"Deposit {: #deposit }","text":"<p>To deposit an asset to Moonbeam from another network, you'll have to first build the transfer data using information from the origin chain before you can send it. You'll need to use a series of deposit methods to build the transfer data.</p> <p>The process for building and sending a deposit transfer data is as follows:</p> <ol> <li>Call the <code>deposit</code> function and pass in the asset symbol or the asset object for the asset to be deposited. This will return a <code>chains</code> array containing the asset's origin network information and a <code>from</code> function which will be used to build the transfer data</li> <li>Call the <code>from</code> function and pass in the chain key or the chain object of the origin network. You can get the chain object from the <code>chains</code> array returned from the <code>deposit</code> function. You can get the chain key one of two ways: by accessing the key property of the chain object (<code>chain.key</code>) or by directly importing <code>ChainKey</code> from the XCM config package (as seen in the example below)</li> <li>Call <code>get</code> and pass in the address of the account on Moonbeam you want to deposit the funds to and a signer or Polkadot address depending on how your code is configured, please refer to the Get section for more information. For the purposes of this guide, you'll need to pass in a Polkadot.js <code>Keyring</code> to sign the transaction as created in the Creating Signers section. The <code>get</code> function returns a <code>send</code> function which already contains all the necessary info to perform the deposit, and it is used in the next step. In addition, other elements such as information about the origin chain asset and the <code>xc</code> representation of the asset on Moonbeam are returned and might be important for logging purposes</li> <li>The <code>send</code> function is used to send the built deposit transfer data along with the amount to send. You can optionally provide a callback function to handle the extrinsic events</li> </ol> <p>To obtain some of the data required to build the deposit transfer data, such as the asset symbol and chain key of the origin network, you can import <code>AssetSymbol</code> and <code>ChainKey</code> from the <code>@moonbeam-network/xcm-config</code> package.</p> <p>An example of the steps described above to deposit DOT from the Polkadot relay chain to xcDOT on Moonbeam is as follows:</p> <pre><code>import { AssetSymbol, ChainKey } from '@moonbeam-network/xcm-config';\n\nasync function deposit() {\n  const dot = AssetSymbol.DOT;\n  const polkadot = ChainKey.Polkadot;\n\n  const { chains, from } = moonbeam.deposit(dot);\n\n  console.log(\n    `\\nYou can deposit ${dot} from these chains: `,\n    chains.map((chain) =&gt; chain.name)\n  );\n\n  const { asset, sourceBalance, source, min, send } = await from(polkadot).get(\n    'INSERT_MOONBEAM_ADDRESS',\n    polkadotKeyring // See the Get section for other accepted arguments\n  );\n\n  console.log(\n    `Your ${asset.originSymbol} balance in ${source.name}: ${toDecimal(\n      sourceBalance,\n      asset.decimals\n    ).toFixed()}. Minimum transferable amount is: ${toDecimal(\n      min,\n      asset.decimals\n    ).toFixed()}`\n  );\n\n  await send('INSERT_AMOUNT', (event) =&gt; console.log(event));\n}\n\ndeposit();\n</code></pre>"},{"location":"xcm-sdk/#chains-chains-deposit","title":"Chains {: #chains-deposit }","text":"<p>As previously mentioned, the <code>deposit</code> function returns a <code>chains</code> array and a <code>from</code> function. The <code>chains</code> array corresponds to the chains you can deposit the given asset from (for the asset that was initially passed into the <code>deposit</code> function). An example of the <code>chains</code> array is as follows:</p> <pre><code>chains: [\n  {\n    key: 'Polkadot',\n    name: 'Polkadot',\n    ws: 'wss://rpc.polkadot.io',\n    weight: 1000000000,\n    parachainId: 0\n  }\n]\n</code></pre>"},{"location":"xcm-sdk/#from-from","title":"From {: #from }","text":"<p>The <code>from</code> function requires a chain key to be passed into it for the origin chain in which the assets are sent from and returns a <code>get</code> function.</p> <pre><code>import { AssetSymbol, ChainKey } from '@moonbeam-network/xcm-config';\n\n...\n\nconst dot = AssetSymbol.DOT;\nconst polkadot = ChainKey.Polkadot;\n\nconst { from } = moonbeam.deposit(dot);\nfrom(polkadot);\n</code></pre>"},{"location":"xcm-sdk/#get-get-deposit","title":"Get {: #get-deposit }","text":"<p>The <code>get</code> function requires that you pass in the receiving account on Moonbeam and a Polkadot signer{target=_blank} or the sending account on Polkadot depending on how you set up your Polkadot signer, and it gets the data required for the deposit.</p> <p>If you have a Polkadot compatible signer, you can pass the signer into the <code>init</code> function, then in the <code>get</code> function you can pass the Polkadot address for the second argument:</p> <pre><code>import { AssetSymbol, ChainKey } from '@moonbeam-network/xcm-config';\n\n...\n\nconst dot = AssetSymbol.DOT;\nconst polkadot = ChainKey.Polkadot;\n\nconst { from } = moonbeam.deposit(dot);\nconst response = await from(polkadot).get(\n  'INSERT_MOONBEAM_ADDRESS',\n  'INSERT_POLKADOT_ADDRESS',\n);\n</code></pre> <p>If you have a Polkadot compatible signer but haven't passed it into the <code>init</code> function, then in the <code>get</code> function you can pass in the Polkadot address for the second argument and the Polkadot signer for the third argument:</p> <pre><code>import { AssetSymbol, ChainKey } from '@moonbeam-network/xcm-config';\n\n...\n\nconst dot = AssetSymbol.DOT;\nconst polkadot = ChainKey.Polkadot;\n\nconst { from } = moonbeam.deposit(dot);\nconst response = await from(polkadot).get(\n  'INSERT_MOONBEAM_ADDRESS',\n  'INSERT_POLKADOT_ADDRESS',\n  { polkadotSigner },\n);\n</code></pre> <p>If you have a Polkadot Keyring pair, as originally was set up in the Initialization section, you'll pass in the <code>polkadotKeyring</code> as the second parameter:</p> <pre><code>import { AssetSymbol, ChainKey } from '@moonbeam-network/xcm-config';\n\n...\n\nconst dot = AssetSymbol.DOT;\nconst polkadot = ChainKey.Polkadot;\n\nconst { from } = moonbeam.deposit(dot);\nconst response = await from(polkadot).get(\n  'INSERT_MOONBEAM_ADDRESS',\n  polkadotKeyring,\n);\n</code></pre> <p>An example of the response for calling <code>get</code> to send DOT from Polkadot to Moonbeam is as follows:</p> <pre><code>{\n  asset: {\n    id: '42259045809535163221576417993425387648',\n    erc20Id: '0xffffffff1fcacbd218edc0eba20fc2308c778080',\n    originSymbol: 'DOT',\n    decimals: 10\n  },\n  existentialDeposit: 10000000000n,\n  min: 33068783n,\n  moonChainFee: {\n    amount: 33068783n,\n    decimals: 10,\n    symbol: 'DOT'\n  },\n  native: {\n    id: '42259045809535163221576417993425387648',\n    erc20Id: '0xffffffff1fcacbd218edc0eba20fc2308c778080',\n    originSymbol: 'DOT',\n    decimals: 10\n  },\n  origin: {\n    key: 'Polkadot',\n    name: 'Polkadot',\n    ws: 'wss://rpc.polkadot.io',\n    weight: 1000000000,\n    parachainId: 0\n  },\n  source: {\n    key: 'Polkadot',\n    name: 'Polkadot',\n    ws: 'wss://rpc.polkadot.io',\n    weight: 1000000000,\n    parachainId: 0\n  },\n  sourceBalance: 0n,\n  sourceFeeBalance: undefined,\n  sourceMinBalance: 0n,\n  getFee: [AsyncFunction: getFee],\n  send: [AsyncFunction: send]\n}\n</code></pre> <p>Where the returned values are as follows:</p> Value Description <code>asset</code> the asset to be transferred <code>existentialDeposit</code> the existential deposit{target=_blank}, or the minimum amount an address must  hold to be considered active if one exists, otherwise <code>0n</code> is returned <code>min</code> the minimum transferrable amount <code>moonChainFee</code> the asset and amount that is needed to pay for Moonbeam's XCM fees.  If different from the <code>asset</code> to be transferred, the fee will be sent in this  asset in addition to the <code>asset</code> to be transferred (as of v0.4.0{target=_blank}) <code>native</code> the native asset of the source chain <code>origin</code> the chain information for where the asset being transferred natively originates from <code>source</code> the chain information for where the asset being transferred is sent from <code>sourceBalance</code> the balance of the asset being transferred on the source chain <code>sourceFeeBalance</code> the balance in the source chain's native asset to pay a fee for the asset  to be transferred if applicable, otherwise <code>undefined</code> is returned <code>sourceMinBalance</code> the minimum balance of the asset being transferred on the source chain <code>getFee</code> a function that estimates the fees for withdrawing a given amount <code>send</code> a function that sends the deposit transfer data"},{"location":"xcm-sdk/#send-send-deposit","title":"Send {: #send-deposit }","text":"<p>When calling <code>send</code>, you will actually send the deposit transfer data that has been built using the <code>deposit</code>, <code>from</code>, and <code>get</code> functions. You simply have to pass in a specified amount to send and an optional callback for handling the extrinsic event. For example, entering <code>10000000000n</code> will send <code>1</code> DOT from Polkadot to Moonbeam, as DOT has 10 decimals.</p> <p>You can refer back to the example in the Deposit section to see how the <code>send</code> function is used.</p>"},{"location":"xcm-sdk/#get-fee-get-fee-deposit","title":"Get Fee {: #get-fee-deposit }","text":"<p>The <code>getFee</code> function estimates the fees for transferring a given amount of the asset specified in the <code>deposit</code> function. An example of getting the fee in Polkadot for transferring DOT to Moonbeam is as follows:</p> <pre><code>import { AssetSymbol, ChainKey } from '@moonbeam-network/xcm-config';\nimport { init } from '@moonbeam-network/xcm-sdk';\nimport { toDecimal } from '@moonbeam-network/xcm-utils';\n\n// ...\n\nasync function getDepositFee() {\n  const dot = AssetSymbol.DOT;\n  const polkadot = ChainKey.Polkadot;\n\n  const { from } = moonbeam.deposit(dot);\n  const { asset, getFee } = await from(polkadot).get(\n    'INSERT_MOONBEAM_ADDRESS',\n    polkadotKeyring // See the Get section for other accepted arguments\n  );\n\n  const fee = await getFee('INSERT_AMOUNT');\n  console.log(\n    `Fee to deposit is estimated to be: ${toDecimal(\n      fee,\n      asset.decimals\n    ).toFixed()} ${dot}`\n  );\n}\n\ngetDepositFee();\n</code></pre>"},{"location":"xcm-sdk/#withdraw-withdraw","title":"Withdraw {: #withdraw }","text":"<p>To withdraw an asset from Moonbeam to send back to the origin network, you'll have to first build the transfer data using information from the origin chain before you can send it. To do so, you'll take the following steps:</p> <ol> <li>Call the <code>withdraw</code> function and pass in the asset symbol or the asset object. This will return a <code>chains</code> array containing the asset's origin network information and a <code>to</code> function which will be used to build the transfer data</li> <li>Call the <code>to</code> function and pass in the chain key of the origin network. You can get the chain object from the <code>chains</code> array returned from the <code>withdraw</code> function. You can get the chain key one of two ways: by accessing the key property of the chain object (<code>chain.key</code>) or by directly importing <code>ChainKey</code> from the XCM config package (as seen in the example below)</li> <li>Call <code>get</code> and pass in the address of the account on the origin network you want to withdraw the funds from and pass in the Ethers signer if you haven't already done so during intialization. This will return information about the origin (destination) chain asset, the <code>xc</code> representation of the asset on Moonbeam. This will return a <code>send</code> function which already contains all the necessary info to perform the withdrawal, and it is used in the next step. In addition, other elements, such as information about the asset, are returned and might be important for logging purposes</li> <li>The <code>send</code> function is used to send the built withdraw transfer data along with the amount to send. You can optionally provide a callback function to handle the extrinsic events</li> </ol> <p>To obtain some of the data required to build the withdraw transfer data, such as the asset symbol and chain key of the origin network, you can import <code>AssetSymbol</code> and <code>ChainKey</code> from the <code>@moonbeam-network/xcm-config</code> package.</p> <p>An example of the steps described above to withdraw xcDOT from Moonbeam to send back to DOT on Polkadot is as follows:</p> <pre><code>import { AssetSymbol, ChainKey } from '@moonbeam-network/xcm-config';\n\nasync function withdraw() {\n  const dot = AssetSymbol.DOT;\n  const polkadot = ChainKey.Polkadot;\n\n  const { chains, to } = moonbeam.withdraw(dot);\n\n  console.log(\n    `\\nYou can withdraw ${dot} to these chains: `,\n    chains.map((chain) =&gt; chain.name)\n  );\n\n  const { asset, destination, destinationBalance, min, send } = await to(\n    polkadot\n  ).get('INSERT_POLKADOT_ADDRESS', {\n    ethersSigner: signer, // Only required if you didn't pass the signer in on initialization\n  });\n\n  console.log(\n    `Your ${asset.originSymbol} balance in ${destination.name}: ${toDecimal(\n      destinationBalance,\n      asset.decimals\n    ).toFixed()}. Minimum transferable amount is: ${toDecimal(\n      min,\n      asset.decimals\n    ).toFixed()}`\n  );\n\n  await send('INSERT_AMOUNT', (event) =&gt; console.log(event));\n}\n\nwithdraw();\n</code></pre>"},{"location":"xcm-sdk/#chains-chains-withdraw","title":"Chains {: #chains-withdraw }","text":"<p>As previously mentioned, the <code>withdraw</code> function returns a <code>chains</code> array and a <code>to</code> function. The <code>chains</code> array corresponds to the chains you can withdraw the given asset from (for the asset that was initially passed into the <code>withdraw</code> function). An example of the <code>chains</code> array is as follows:</p> <pre><code>chains: [\n  {\n    key: 'Polkadot',\n    name: 'Polkadot',\n    ws: 'wss://rpc.polkadot.io',\n    weight: 1000000000,\n    parachainId: 0\n  }\n]\n</code></pre>"},{"location":"xcm-sdk/#to-to","title":"To {: #to }","text":"<p>The <code>to</code> function requires a chain key to be passed into it for the origin chain in which the assets are being withdrawn back to and returns a <code>get</code> function.</p> <pre><code>import { AssetSymbol, ChainKey } from '@moonbeam-network/xcm-config';\n\n...\n\nconst dot = AssetSymbol.DOT;\nconst polkadot = ChainKey.Polkadot;\n\nconst { to } = moonbeam.withdraw(dot);\n\nto(polkadot);\n</code></pre>"},{"location":"xcm-sdk/#get-get-withdraw","title":"Get {: #get-withdraw }","text":"<p>The <code>get</code> function requires that you pass in the receiving account on the destination chain and the Ethers signer for the sending account on Moonbeam, and it gets the data required for the withdraw.</p> <pre><code>import { AssetSymbol, ChainKey } from '@moonbeam-network/xcm-config';\n\n...\n\nconst dot = AssetSymbol.DOT;\nconst polkadot = ChainKey.Polkadot;\n\nconst { to } = moonbeam.deposit(dot);\nconst response =  await to(\n    polkadot,\n  ).get('INSERT_POLKADOT_ADDRESS',\n  { ethersSigner: signer } // Only required if you didn't pass the signer in on initialization\n)\n</code></pre> <p>An example of the response for calling <code>get</code> to send xcDOT from Moonbeam back to DOT on Polkadot is as follows:</p> <pre><code>{\n  asset: {\n    id: '42259045809535163221576417993425387648',\n    erc20Id: '0xffffffff1fcacbd218edc0eba20fc2308c778080',\n    originSymbol: 'DOT',\n    decimals: 10\n  },\n  destination: {\n    key: 'Polkadot',\n    name: 'Polkadot',\n    ws: 'wss://rpc.polkadot.io',\n    weight: 1000000000,\n    parachainId: 0\n  },\n  destinationBalance: 0n,\n  destinationFee: 520000000n,\n  existentialDeposit: 10000000000n,\n  min: 10520000000n,\n  minXcmFeeAsset: {\n    amount: 0n,\n    decimals: 10,\n    symbol: \"DOT\",\n  },\n  native: {\n    id: '42259045809535163221576417993425387648',\n    erc20Id: '0xffffffff1fcacbd218edc0eba20fc2308c778080',\n    originSymbol: 'DOT',\n    decimals: 10\n  },\n  origin: {\n    key: 'Polkadot',\n    name: 'Polkadot',\n    ws: 'wss://rpc.polkadot.io',\n    weight: 1000000000,\n    parachainId: 0\n  },\n  originXcmFeeAssetBalance: undefined,\n  getFee: [AsyncFunction: getFee],\n  send: [AsyncFunction: send]\n}\n</code></pre> <p>Where the returned values are as follows:</p> Value Description <code>asset</code> the asset to be transferred <code>destination</code> the chain information for where the asset is being transferred to <code>destinationBalance</code> the balance of the asset being transferred on the destination chain <code>destinationFee</code> the fee for the asset to be transferred on the destination chain <code>existentialDeposit</code> the existential deposit{target=_blank}, or the minimum amount an address must  hold to be considered active if one exists, otherwise <code>0n</code> is returned <code>min</code> the minimum transferable amount of the asset being transferred <code>minXcmFeeAsset</code> the minimum transferable amount of the asset that needs to be sent along to pay for the fees <code>native</code> the native asset of the source chain <code>origin</code> the chain information for where the asset being transferred natively originates from <code>originXcmFeeAssetBalance</code> the balance in the origin account of the asset that is sent along with the transfer to pay for the fees, if any <code>getFee</code> a function that estimates the fees for depositing a given amount <code>send</code> a function that sends the withdraw transfer data"},{"location":"xcm-sdk/#send-send-withdraw","title":"Send {: #send-withdraw }","text":"<p>When calling <code>send</code>, you will actually send the withdraw transfer data that has been built using the <code>withdraw</code>, <code>to</code>, and <code>get</code> functions. You simply have to pass in a specified amount to send and an optional callback for handling the extrinsic event. For example, entering <code>10000000000n</code> will send <code>1</code> xcDOT on Moonbeam back to DOT on Polkadot.</p> <p>You can refer back to the example in the Withdraw section to see how the <code>send</code> function is used.</p>"},{"location":"xcm-sdk/#get-fee-get-fee-withdraw","title":"Get Fee {: #get-fee-withdraw }","text":"<p>The <code>getFee</code> function estimates the fees for transferring a given amount of the asset specified in the <code>withdraw</code> function. An example of getting the fee in GLMR for transferring xcDOT from Moonbeam back to DOT on Polkadot is as follows:</p> <pre><code>import { AssetSymbol, ChainKey } from '@moonbeam-network/xcm-config';\nimport { init } from '@moonbeam-network/xcm-sdk';\nimport { toDecimal } from '@moonbeam-network/xcm-utils';\n\n// ...\n\nasync function getWithdrawFee() {\n  const dot = AssetSymbol.DOT;\n  const polkadot = ChainKey.Polkadot;\n\n  const { to } = moonbeam.withdraw(dot);\n  const { asset, getFee } = await from(polkadot).get(\n    'INSERT_POLKADOT_ADDRESS',\n    { ethersSigner } // Only required if you didn't pass the signer in on initialization\n  );\n\n  const fee = await getFee('INSERT_AMOUNT');\n  console.log(\n    `Fee to deposit is estimated to be: ${toDecimal(\n      fee,\n      moonbeam.moonChain.decimals\n    ).toFixed()} ${moonbeam.moonAsset.originSymbol}`\n  );\n}\n\ngetWithdrawFee();\n</code></pre>"},{"location":"xcm-sdk/#subscribe-to-assets-balance-information-subscribe","title":"Subscribe to Assets Balance Information {: #subscribe }","text":"<p>To subscribe to balance information and get a given account's latest balance for each of the supported assets, you can use the <code>subscribeToAssetsBalanceInfo</code> function and pass in the address you want to get the balance for and a callback function to handle the data:</p> <p>=== \"Moonbeam\"</p> <pre><code>```js\nmoonbeam.subscribeToAssetsBalanceInfo('INSERT_ADDRESS', cb);\n```\n</code></pre> <p>=== \"Moonriver\"</p> <pre><code>```js\nmoonriver.subscribeToAssetsBalanceInfo('INSERT_ADDRESS', cb);\n```\n</code></pre> <p>=== \"Moonbase Alpha\"</p> <pre><code>```js\nmoonbase.subscribeToAssetsBalanceInfo('INSERT_ADDRESS', cb);\n```\n</code></pre> <p>The following example retrieves the balance information for a given account on Moonbeam and prints the balance for each of the supported assets to the console:</p> <pre><code>const unsubscribe = await moonbeam.subscribeToAssetsBalanceInfo(\n  'INSERT_MOONBEAM_ADDRESS',\n  (balances) =&gt; {\n    balances.forEach(({ asset, balance, origin }) =&gt; {\n      console.log(\n        `${balance.symbol}: ${toDecimal(\n          balance.balance,\n          balance.decimals\n        ).toFixed()} (${origin.name} ${asset.originSymbol})`\n      );\n    });\n  }\n);\n\nunsubscribe();\n</code></pre>"},{"location":"xcm-sdk/#utility-functions-sdk-utils","title":"Utility Functions {: #sdk-utils }","text":"<p>There are utility functions in both the XCM SDK and the XCM Utilities packages. The XCM SDK provides the following SDK-related utility functions:</p> <ul> <li><code>isXcmSdkDeposit</code></li> <li><code>isXcmSdkWithdraw</code></li> </ul> <p>And the XCM Utilities package provides the following generic utility functions:</p> <ul> <li><code>toDecimal</code></li> <li><code>toBigInt</code></li> <li><code>hasDecimalOverflow</code></li> </ul>"},{"location":"xcm-sdk/#check-if-transfer-data-is-for-a-deposit-deposit-check","title":"Check if Transfer Data is for a Deposit  {: #deposit-check }","text":"<p>To determine whether transfer data is for a deposit, you can pass in transfer data to the <code>isXcmSdkDeposit</code> function and a boolean will be returned. If <code>true</code> is returned the transfer data is for a deposit, and <code>false</code> is returned if it is not.</p> <p>The following are some examples:</p> <pre><code>import { init, isXcmSdkDeposit } from '@moonbeam-network/xcm-sdk';\n\n...\n\nconst deposit = moonbeam.deposit(moonbeam.symbols[0]);\nconsole.log(isXcmSdkDeposit(deposit)); // Returns true\n</code></pre> <pre><code>import { init, isXcmSdkDeposit } from '@moonbeam-network/xcm-sdk';\n\n...\n\nconst withdraw = moonbeam.withdraw(moonbeam.symbols[0]);\nconsole.log(isXcmSdkDeposit(withdraw)); // Returns false\n</code></pre>"},{"location":"xcm-sdk/#check-if-transfer-data-is-for-a-withdrawal-withdraw-check","title":"Check if Transfer Data is for a Withdrawal {: #withdraw-check }","text":"<p>To determine whether transfer data is for a withdrawal, you can pass in transfer data to the <code>isXcmSdkWithdraw</code> function and a boolean will be returned. If <code>true</code> is returned the transfer data is for a withdrawal, and <code>false</code> is returned if it is not.</p> <p>The following are some examples:</p> <pre><code>import { init, isXcmSdkWithdraw } from '@moonbeam-network/xcm-sdk';\n\n...\n\nconst withdraw = moonbeam.withdraw(moonbeam.symbols[0]);\nconsole.log(isXcmSdkWithdraw(withdraw)); // Returns true\n</code></pre> <pre><code>import { init, isXcmSdkWithdraw } from '@moonbeam-network/xcm-sdk';\n\n...\n\nconst deposit = moonbeam.deposit(moonbeam.symbols[0]);\nconsole.log(isXcmSdkDeposit(deposit)); // Returns false\n</code></pre>"},{"location":"xcm-sdk/#convert-balance-to-decimal-or-bigint-decimals","title":"Convert Balance to Decimal or BigInt {: #decimals }","text":"<p>To convert a balance to decimal format, you can use the <code>toDecimal</code> function, which returns a given number in decimal format based on the number of decimals provided. You can optionally pass in a value for a third argument to dictate the maximum number of decimal places used; otherwise, the default is <code>6</code>; and a fourth argument that dictates the rounding method{target=_blank} of the number. The <code>toDecimal</code> function returns a Big number type that you can convert to a number or string using its methods <code>toNumber</code>, <code>toFixed</code>, <code>toPrecision</code>, and <code>toExponential</code>. We recommend using them as a string, since big numbers or numbers with a lot of decimals can lose precision when using number types.</p> <p>To convert from decimal number back to BigInt, you can use the <code>toBigInt</code> function which returns a given number in BigInt format based on the number of decimals provided.</p> <p>For example, to convert a balance on Moonbeam from Wei to Glimmer you can use the following code:</p> <pre><code>import { toDecimal, toBigInt } from '@moonbeam-network/xcm-utils';\n\nconst balance = toDecimal(3999947500000000000n, 18).toFixed();\nconsole.log(balance); // Returns '3.999947'\n\nconst big = toBigInt('3.999947', 18);\nconsole.log(big); // Returns 3999947000000000000n\n</code></pre> <p>You can also use <code>hasDecimalOverflow</code> to make sure that a given number does not have more decimal places than allowed. This is helpful for form inputs.</p>"},{"location":"v1/reference/","title":"Moonbeam XCM SDK Reference: v1","text":""},{"location":"v1/reference/#introduction-introduction","title":"Introduction {: #introduction }","text":"<p>The Moonbeam XCM SDK enables developers to easily transfer assets between chains, either between parachains or between a parachain and the relay chain, within the Polkadot/Kusama ecosystem. With the SDK, you don't need to worry about determining the multilocation of the origin or destination assets or which extrinsics are used on which networks to send XCM transfers.</p> <p>The SDK provides an API that enables you to get asset information for each of the supported assets, the source chains where a given asset can be sent from, and, given a source chain, the supported destination chains where the given asset can be sent to. The SDK also includes helper methods related to transferring cross-chain assets, such as the ability to get an estimated amount of the asset the destination account will receive, less any execution fees, and asset conversion methods based on the asset and number of decimals it has. All of which enables you to easily and seamlessly transfer assets across chains.</p> <p>This page includes a list of the interfaces and methods available in the XCM SDK for v1. For information on how to use the XCM SDK interfaces and methods, please refer to the Using the XCM SDK{target=_blank} guide.</p>"},{"location":"v1/reference/#core-types-and-interfaces-asset-chain-types","title":"Core Types and Interfaces {: #asset-chain-types }","text":"<p>The XCM SDK is based on the premise of defining an asset to transfer and then defining the source chain to send the asset from and the destination chain to send the asset to, which combined builds the transfer data. The following sections cover the types and interfaces you'll interact with when interacting with assets, chains, and transfer data.</p>"},{"location":"v1/reference/#assets-assets","title":"Assets {: #assets }","text":"<ul> <li> <p><code>Asset</code> - defines an asset's key and symbol used on the asset's origin chain</p> Name Type Description <code>key</code> string Identifies an asset <code>originSymbol</code> string The symbol of the asset on the asset's origin chain </li> <li> <p><code>AssetAmount</code> - defines properties related to an asset, including <code>Asset</code> properties, the decimals and symbol of the asset, and the amount an associated source or destination address has of the asset</p> Name Type Description <code>amount</code> bigint Identifies a particular amount of the asset (i.e., balance, minimum, maximum, etc.) <code>decimals</code> number The number of decimals the asset has <code>symbol</code> string The symbol of the asset <code>key</code> string Identifies an asset <code>originSymbol</code> string The symbol of the asset on the asset's origin chain <p>!!! note     There are a few utility methods that are available for working with <code>AssetAmount</code> class that convert the amount to various formats. Please refer to the Methods for Asset Conversions section.</p> </li> </ul>"},{"location":"v1/reference/#chains-chains","title":"Chains {: #chains }","text":"<ul> <li> <p><code>Chain</code> - defines properties related to a chain, used to define the source and destination chains. If a chain is an EVM parachain, there are a couple additional properties</p> Name Type Description <code>ecosystem</code> Ecosystem Identifies the ecosystem the chain belongs to: <code>polkadot</code>, <code>kusama</code>, or <code>alphanet-relay</code> <code>isTestChain</code> boolean Whether the chain is a TestNet <code>key</code> string Identifies a chain <code>name</code> string The name of the chain <code>type</code> ChainType The type of the chain: <code>parachain</code> or <code>evm-parachain</code> <code>assetsData</code> Map A list of the assets that the chain supports <code>genesisHash</code> string The hash of the genesis block <code>parachainId</code> number The ID of the parachain <code>ss58Format</code> number The ss58 format{target=_blank} for the chain <code>usesChainDecimals</code> boolean A flag indicating if the chain uses its own decimals in balance queries for all the assets. Defaults to <code>false</code> <code>ws</code> string The WebSocket endpoint for the chain <code>id</code> number For EVM parachains only - The chain ID <code>rpc</code> string For EVM parachains only - The HTTP RPC endpoint for the chain <li> <p><code>ChainAssetsData</code> - defines the information needed to target the asset on the chain. This is mostly for internal usage to accommodate how different chains store their assets. The SDK defaults to the asset ID if certain properties are not applicable to the given chain</p> Name Type Description <code>asset</code> Asset The asset's key and origin symbol <code>balanceId</code> ChainAssetId The balance ID of the asset. Defaults to the asset ID <code>decimals</code> number The number of decimals the asset has <code>id</code> ChainAssetId The asset ID <code>metadataId</code> ChainAssetId The metadata ID of the asset <code>minId</code> ChainAssetId The minimum ID of the asset <code>palletInstance</code> number The number of the pallet instance the asset belongs to <code>min</code> number The minimum amount of the asset that is required to be left in the account for it to be active. Similar to the existential deposit except it is for non-native assets <p><code>ChainAssetId</code> is a generic type used to specify the location of the asset on the chain, which is different on every chain, and is defined as:</p> <p><code>ts type ChainAssetId =   | string   | number   | bigint   | { [key: string]: ChainAssetId };</code></p> </li>"},{"location":"v1/reference/#transfer-data-transfer-data","title":"Transfer Data {: #transfer-data }","text":"<ul> <li> <p><code>TransferData</code> - defines the complete transfer data for transferring an asset, including asset, source chain, and destination chain information, and a few helper functions for the transfer process</p> Name Type Description <code>destination</code> DestinationChainTransferData The assembled destination chain and address information <code>getEstimate</code> function Gets the estimated amount of the asset that will be received by the destination address <code>isSwapPossible</code> boolean Returns whether or not the swap is possible <code>max</code> AssetAmount The maximum amount of the asset that can be transferred <code>min</code> AssetAmount The minimum amount of the asset that can be transferred <code>source</code> SourceChainTransferData The assembled source chain and address information <code>swap</code> function Swaps the destination and the source chains and returns the swapped transfer data <code>transfer</code> function Transfers a given amount of the asset from the source chain to the destination chain </li> <li> <p><code>DestinationChainTransferData</code> - defines the destination chain data for the transfer</p> Name Type Description <code>balance</code> AssetAmount The balance of the asset being transferred on the destination address <code>chain</code> AnyChain The destination chain information <code>existentialDeposit</code> AssetAmount The existential deposit for the asset being transferred on the destination chain <code>fee</code> AssetAmount The amount of fees for the asset being transferred on the destination chain <code>min</code> AssetAmount The minimum amount of the asset to transfer. This is different than <code>TransferData.min</code>, as this dictates the minimum amount that should be received on the destination chain </li> <li> <p><code>SourceChainTransferData</code> -  defines the source chain data for the transfer</p> Name Type Description <code>balance</code> AssetAmount The balance of the asset being transferred for the source address <code>chain</code> AnyChain The source chain information <code>destinationFeeBalance</code> AssetAmount The balance of the asset used to pay for fees in the destination chain <code>existentialDeposit</code> AssetAmount The existential deposit for the asset being transferred on the source chain <code>fee</code> AssetAmount The amount of fees for the asset being transferred on the source chain <code>feeBalance</code> AssetAmount The balance of the asset being transferred on the source chain <code>min</code> AssetAmount The minimum amount of the asset that should be kept on the source chain, taking into consideration the <code>existentialDeposit</code> and <code>fee</code> for the transfer <code>max</code> AssetAmount The maximum amount of the asset that can be transferred </li> </ul>"},{"location":"v1/reference/#core-methods-core-sdk-methods","title":"Core Methods {: #core-sdk-methods }","text":"<p>The SDK provides the following core methods:</p> <ul> <li> <p><code>Sdk()</code> - exposes the methods of the XCM SDK. Must be called first to access other SDK methods</p> <p>??? code \"Parameters\"     |    Name    |     Type     |                       Description                        |     |:----------:|:------------:|:--------------------------------------------------------:|     | <code>options?</code> | SdkOptions | Allows you to specify an <code>evmSigner</code> or <code>polkadotSigner</code> |</p> <p>??? code \"Returns\"     |       Name        |   Type   |                                                        Description                                                         |     |:-----------------:|:--------:|:--------------------------------------------------------------------------------------------------------------------------:|     |     <code>assets</code>      | function | Provides an entry point to building the data necessary to transfer an asset between a source chain and a destination chain |     | <code>getTransferData</code> | function |               Builds the data necessary to transfer an asset between a source chain and a destination chain                |</p> </li> <li> <p><code>getTransferData()</code> - builds the data necessary to transfer an asset between a source chain and a destination chain</p> <p>??? code \"Parameters\"     |          Name           |               Type               |                                                               Description                                                               |     |:-----------------------:|:--------------------------------:|:---------------------------------------------------------------------------------------------------------------------------------------:|     |  <code>destinationAddress</code>   |             string             |                                      The address of the receiving account on the destination chain                                      |     | <code>destinationKeyorChain</code> |       string | AnyChain       |                                            The key or <code>Chain</code> data for the destination chain                                            |     |      <code>evmSigner?</code>       | EthersSigner  | WalletClient  | The signer for Ethereum-compatible chains that use H160 Ethereum-style accounts. Can be either an Ethers signer or a viem Wallet Client |     |      <code>keyOrAsset</code>       |        string | Asset         |                                         The key or <code>Asset</code> data for the asset being transferred                                         |     |    <code>polkadotSigner?</code>    | PolkadotSigner | IKeyringPair |                                                   The Polkadot signer or Keyring pair                                                   |     |     <code>sourceAddress</code>     |             string             |                                         The address of the sending account on the source chain                                          |     |   <code>sourceKeyOrChain</code>    |       string | AnyChain       |                                              The key or <code>Chain</code> data for the source chain                                               |</p> <p>??? code \"Returns\"     |       Name       |              Type              |                                       Description                                       |     |:----------------:|:------------------------------:|:---------------------------------------------------------------------------------------:|     |  <code>destination</code>   | DestinationChainTransferData |                 The assembled destination chain and address information                 |     |  <code>getEstimate</code>   |            function            | Gets the estimated amount of the asset that will be received by the destination address |     | <code>isSwapPossible</code> |           boolean            |                       Returns whether or not the swap is possible                       |     |      <code>max</code>       |         AssetAmount          |                 The maximum amount of the asset that can be transferred                 |     |      <code>min</code>       |         AssetAmount          |                 The minimum amount of the asset that can be transferred                 |     |     <code>source</code>     |   SourceChainTransferData    |                   The assembled source chain and address information                    |     |      <code>swap</code>      |            function            |    Swaps the destination and the source chains and returns the swapped transfer data    |     |    <code>transfer</code>    |            function            |  Transfers a given amount of the asset from the source chain to the destination chain   |</p> </li> <li> <p><code>assets()</code> - provides an entry point to building the data necessary to transfer an asset between a source chain and a destination chain</p> <p>??? code \"Parameters\"     |     Name     |    Type     |                                     Description                                      |     |:------------:|:-----------:|:------------------------------------------------------------------------------------:|     | <code>ecosystem?</code> | Ecosystem | Specify the ecosystem for a set of assets: <code>polkadot</code>, <code>kusama</code>, or <code>alphanet-relay</code> |</p> <p>??? code \"Returns\"     |   Name   |   Type    |           Description            |     |:--------:|:---------:|:--------------------------------:|     | <code>assets</code> | Asset[] |  A list of the supported assets  |     | <code>asset</code>  | function  | Sets the asset to be transferred |</p> <pre><code>Refer to the following section on how to continue to build the transfer data using the `asset` function.\n</code></pre> </li> </ul>"},{"location":"v1/reference/#methods-for-building-transfer-data-starting-with-assets-transfer-data-builder-methods","title":"Methods for Building Transfer Data Starting with Assets {: #transfer-data-builder-methods }","text":"<p>When building transfer data with the <code>Sdk().assets()</code> function, you'll use multiple methods to build the underlying XCM message and send it.</p> <ul> <li> <p><code>asset()</code> - sets the asset to be transferred. Must call <code>assets()</code> first</p> <p>??? code \"Parameters\"     |     Name     |       Type        |                       Description                       |     |:------------:|:-----------------:|:-------------------------------------------------------:|     | <code>keyOrAsset</code> | string | Asset | The key or <code>Asset</code> data for the asset being transferred |</p> <p>??? code \"Returns\"     |      Name      |     Type     |                          Description                          |     |:--------------:|:------------:|:-------------------------------------------------------------:|     | <code>sourceChains</code> | AnyChain[] | A list of the supported source chains for the specified asset |     |    <code>source</code>    |   function   |       Sets the source chain to transfer the asset from        |</p> </li> <li> <p><code>source()</code> - sets the source chain to transfer the asset from. Must call <code>asset()</code> first</p> <p>??? code \"Parameters\"     |     Name     |         Type         |                 Description                  |     |:------------:|:--------------------:|:--------------------------------------------:|     | <code>keyOrChain</code> | string | AnyChain | The key or <code>Chain</code> data for the source chain |</p> <p>??? code \"Returns\"     |        Name         |     Type     |                                     Description                                     |     |:-------------------:|:------------:|:-----------------------------------------------------------------------------------:|     | <code>destinationChains</code> | AnyChain[] | A list of the supported destination chains for the specified asset and source chain |     |    <code>destination</code>    |   function   |                Sets the destination chain to transfer the asset from                |</p> </li> <li> <p><code>destination()</code> - sets the destination chain to transfer the asset to. Must call <code>source()</code> first</p> <p>??? code \"Parameters\"     |     Name     |         Type         |                    Description                    |     |:------------:|:--------------------:|:-------------------------------------------------:|     | <code>keyOrChain</code> | string | AnyChain | The key or <code>Chain</code> data for the destination chain |</p> <p>??? code \"Returns\"     |    Name    |   Type   |                                          Description                                          |     |:----------:|:--------:|:---------------------------------------------------------------------------------------------:|     | <code>accounts</code> | function | Sets the source address, the destination address, and the signer(s) required for the transfer |</p> </li> <li> <p><code>accounts()</code> - sets the source address, the destination address, and the signer(s) required for the transfer. Must call <code>destination()</code> first</p> <p>??? code \"Parameters\"     |         Name         |        Type        |                          Description                          |     |:--------------------:|:------------------:|:-------------------------------------------------------------:|     |   <code>sourceAddress</code>    |      string      |    The address of the sending account on the source chain     |     | <code>destinationAddress</code> |      string      | The address of the receiving account on the destination chain |     |      <code>signers?</code>      | Partial(signers) | The Ethers or Polkadot signers required to sign transactions  |</p> <p>??? code \"Returns\"     Please refer to the returns section of the <code>getTransferData()</code> method for information on the returned transfer data.</p> </li> </ul>"},{"location":"v1/reference/#methods-for-consuming-transfer-data-transfer-data-consumer-methods","title":"Methods for Consuming Transfer Data {: #transfer-data-consumer-methods }","text":"<ul> <li> <p><code>swap()</code> - returns the transfer data necessary to swap the asset from the destination chain back to the source chain</p> <p>??? code \"Parameters\"     None</p> <p>??? code \"Returns\"     Please refer to the returns section of the <code>getTransferData()</code> method for information on the returned transfer data. Keep in mind that with the <code>swap</code> function, the <code>source</code> and <code>destination</code> in the original transfer data has been swapped.</p> </li> <li> <p><code>transfer()</code> - transfers a given amount of the asset from the source chain to the destination chain</p> <p>??? code \"Parameters\"     |   Name   |             Type             |                                  Description                                  |     |:--------:|:----------------------------:|:-----------------------------------------------------------------------------:|     | <code>amount</code> | bigint | number | string | The amount of the asset to transfer between the source and destination chains |</p> <p>??? code \"Returns\"     | Name |       Type        |                        Description                        |     |:----:|:-----------------:|:---------------------------------------------------------:|     |  -   | Promise(string) | The transaction hash for the transfer on the source chain |</p> </li> <li> <p><code>getEstimate()</code> - returns an estimated amount of the asset that will be received on the destination chain, less any destination fees</p> <p>??? code \"Parameters\"     |   Name   |        Type        |                                  Description                                  |     |:--------:|:------------------:|:-----------------------------------------------------------------------------:|     | <code>amount</code> | number | string | The amount of the asset to transfer between the source and destination chains |</p> <p>??? code \"Returns\"     | Name |     Type      |                                    Description                                    |     |:----:|:-------------:|:---------------------------------------------------------------------------------:|     |  -   | AssetAmount | An estimated amount of the asset that will be received by the destination address |</p> </li> </ul>"},{"location":"v1/reference/#methods-for-asset-conversions-utility-functions","title":"Methods for Asset Conversions {: #utility-functions }","text":"<ul> <li> <p><code>toDecimal()</code> - converts an <code>AssetAmount</code> to a decimal. The number to convert to decimal format and the number of decimals the asset uses are pulled automatically from the <code>AssetAmount</code></p> <p>??? code \"Parameters\"     |     Name      |      Type      |                                                                    Description                                                                     |     |:-------------:|:--------------:|:--------------------------------------------------------------------------------------------------------------------------------------------------:|     | <code>maxDecimal?</code> |    number    |                                          The maximum number of decimal places to use. The default is <code>6</code>                                           |     | <code>roundType?</code>  | RoundingMode | Accepts an index that dictates the rounding method{target=_blank} to use based on the <code>RoundingMode</code> enum |</p> <pre><code>Where the `RoundingMode` enum is defined as:\n\n```js\nenum RoundingMode {\n  RoundDown = 0,\n  RoundHalfUp = 1,\n  RoundHalfEven = 2,\n  RoundUp = 3\n}\n```\n</code></pre> <p>??? code \"Returns\"     | Name |   Type   |            Description             |     |:----:|:--------:|:----------------------------------:|     |  -   | string | The given amount in decimal format |</p> </li> <li> <p><code>toBig()</code> - converts an <code>AssetAmount</code> to a big number</p> <p>??? code \"Parameters\"     None</p> <p>??? code \"Returns\"     | Name | Type  |              Description              |     |:----:|:-----:|:-------------------------------------:|     |  -   | Big | The given amount in big number format |</p> </li> <li> <p><code>toBigDecimal()</code> - converts an <code>AssetAmount</code> to a decimal and then to a big number. The number to convert to decimal format and the number of decimals the asset uses are pulled automatically from the <code>AssetAmount</code></p> <p>??? code \"Parameters\"     |     Name      |      Type      |                                                                    Description                                                                     |     |:-------------:|:--------------:|:--------------------------------------------------------------------------------------------------------------------------------------------------:|     | <code>maxDecimal?</code> |    number    |                                          The maximum number of decimal places to use. The default is <code>6</code>                                           |     | <code>roundType?</code>  | RoundingMode | Accepts an index that dictates the rounding method{target=_blank} to use based on the <code>RoundingMode</code> enum |</p> <pre><code>Where the `RoundingMode` enum is defined as:\n\n```js\nenum RoundingMode {\n  RoundDown = 0,\n  RoundHalfUp = 1,\n  RoundHalfEven = 2,\n  RoundUp = 3\n}\n```\n</code></pre> <p>??? code \"Returns\"     | Name | Type  |                  Description                  |     |:----:|:-----:|:---------------------------------------------:|     |  -   | Big | The given amount in big number decimal format |</p> </li> </ul>"},{"location":"v1/xcm-sdk/","title":"Using the Moonbeam XCM SDK: v1","text":""},{"location":"v1/xcm-sdk/#introduction-introduction","title":"Introduction {: #introduction }","text":"<p>The Moonbeam XCM SDK enables developers to easily transfer assets between chains, either between parachains or between a parachain and the relay chain, within the Polkadot/Kusama ecosystem. With the SDK, you don't need to worry about determining the multilocation of the origin or destination assets or which extrinsics are used on which networks to send XCM transfers.</p> <p>The XCM SDK offers helper functions, that provide a very simple interface to execute XCM transfers between chains in the Polkadot/Kusama ecosystem. In addition, the XCM config package allows any parachain project to add their information in a standard way, so they can be immediately supported by the XCM SDK.</p> <p>For an overview of the available methods and interfaces in the Moonbeam XCM SDK, please refer to the Reference{target=_blank} page.</p> <p>The examples in this guide are shown on Moonbeam, but can be adapted to be used on Moonriver or Moonbase Alpha.</p>"},{"location":"v1/xcm-sdk/#install-the-xcm-sdk-install-the-xcm-sdk","title":"Install the XCM SDK {: #install-the-xcm-sdk }","text":"<p>To get started with the Moonbeam XCM SDK, you'll need to first install the SDK:</p> <pre><code>npm install @moonbeam-network/xcm-sdk\n</code></pre> <p>You'll also need to install a few additional dependencies that you'll use to interact with the SDK in this guide. You'll need the Polkadot.js API to create a Polkadot signer:</p> <pre><code>npm install @polkadot/api @polkadot/util-crypto\n</code></pre> <p>You'll also need an Ethereum signer if you're interacting with an Ethereum-compatible chain like Moonbeam. This guide will cover using Ethers.js and viem. You'll need to install whichever library you want to use:</p> <p>=== \"Ethers.js\"</p> <pre><code>```bash\nnpm install ethers@^5.7.2\n```\n</code></pre> <p>=== \"viem\"</p> <pre><code>```bash\nnpm install viem\n```\n</code></pre>"},{"location":"v1/xcm-sdk/#create-signers-create-signers","title":"Create Signers {: #create-signers }","text":"<p>When transferring assets between chains, you'll need signers in place to sign the transactions. If you're interacting with an Ethereum-compatible chain that uses standard Ethereum-style H160 addresses, such as Moonbeam, you'll need to have an Ethereum signer, which can be an Ethers.js{target=_blank} signer or a viem Wallet Client{target=_blank}. To interact with the relay chain or other parachains, you'll need a Polkadot{target=_blank} signer.</p> <p>You can pass, for example, a browser extension wallet as a signer into Ethers{target=_blank} or viem{target=_blank}, such as MetaMask. Similarly, with Polkadot, you can pass a compatible wallet to the signer using the <code>@polkadot/extension-dapp</code> library{target=_blank}.</p> <p>To create an EVM signer and a Polkadot signer, you can refer to the following sections.</p> <p>!!! remember     Never store your private key or mnemonic in a JavaScript or TypeScript file.</p>"},{"location":"v1/xcm-sdk/#create-a-evm-signer-create-a-evm-signer","title":"Create a EVM Signer {: #create-a-evm-signer }","text":"<p>To create an Ethers signer, you can use the following code snippet:</p> <pre><code>import { ethers } from 'ethers';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst provider = new ethers.providers.WebSocketProvider('INSERT_WS_ENDPOINT', {\n  chainId: INSERT_CHAIN_ID,\n  name: 'INSERT_CHAIN_NAME',\n});\nconst evmSigner = new ethers.Wallet(privateKey, provider);\n</code></pre> <p>For Moonbeam specifically, you can use the following configurations:</p> <p>=== \"Moonbeam\"</p> <pre><code>```js\nimport { ethers } from 'ethers';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst provider = new ethers.providers.WebSocketProvider(\n  '{{ networks.moonbeam.wss_url }}', \n  {\n    chainId: {{ networks.moonbeam.chain_id }},\n    name: 'moonbeam',\n  }\n);\nconst evmSigner = new ethers.Wallet(privateKey, provider);\n```\n</code></pre> <p>=== \"Moonriver\"</p> <pre><code>```js\nimport { ethers } from 'ethers';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst provider = new ethers.providers.WebSocketProvider(\n  '{{ networks.moonriver.wss_url }}', \n  {\n    chainId: {{ networks.moonriver.chain_id }},\n    name: 'moonriver',\n  }\n);\nconst evmSigner = new ethers.Wallet(privateKey, provider);\n```\n</code></pre> <p>=== \"Moonbase Alpha\"</p> <pre><code>```js\nimport { ethers } from 'ethers';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst provider = new ethers.providers.WebSocketProvider(\n  '{{ networks.moonbase.wss_url }}',\n  {\n    chainId: {{ networks.moonbase.chain_id }},\n    name: 'moonbase',\n  }\n);\nconst evmSigner = new ethers.Wallet(privateKey, provider);\n```\n</code></pre> <p>Alternatively, you can create a viem Wallet Client to pass as EVM signer:</p> <p>=== \"Moonbeam\"</p> <pre><code>```js\nimport { createWalletClient, http } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts' \nimport { moonbeam } from 'viem/chains';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst account = privateKeyToAccount(privateKey);\n\nconst evmSigner = createWalletClient({\n  account,\n  chain: moonbeam,\n  transport: http(),\n});\n```\n</code></pre> <p>=== \"Moonriver\"</p> <pre><code>```js\nimport { createWalletClient, http } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts' \nimport { moonriver } from 'viem/chains';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst account = privateKeyToAccount(privateKey);\n\nconst evmSigner = createWalletClient({\n  account,\n  chain: moonriver,\n  transport: http(),\n});\n```\n</code></pre> <p>=== \"Moonbase Alpha\"</p> <pre><code>```js\nimport { createWalletClient, http } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts' \nimport { moonbaseAlpha } from 'viem/chains';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst account = privateKeyToAccount(privateKey);\n\nconst evmSigner = createWalletClient({\n  account,\n  chain: moonbaseAlpha,\n  transport: http(),\n});\n```\n</code></pre> <p>If you want to pass in a browser extension wallet to viem, you can use the following code:</p> <p>=== \"Moonbeam\"</p> <pre><code>```js\nimport { createWalletClient, custom } from 'viem';\nimport { moonbeam } from 'viem/chains';\n\nconst evmSigner = createWalletClient({\n  chain: moonbeam,\n  transport: custom(window.ethereum),\n});\n```\n</code></pre> <p>=== \"Moonriver\"</p> <pre><code>```js\nimport { createWalletClient, custom } from 'viem';\nimport { moonriver } from 'viem/chains';\n\nconst evmSigner = createWalletClient({\n  chain: moonriver,\n  transport: custom(window.ethereum),\n});\n```\n</code></pre> <p>=== \"Moonbase Alpha\"</p> <pre><code>```js\nimport { createWalletClient, custom } from 'viem';\nimport { moonbaseAlpha } from 'viem/chains';\n\nconst evmSigner = createWalletClient({\n  chain: moonbaseAlpha,\n  transport: custom(window.ethereum),\n});\n```\n</code></pre> <p>!!! note     --8&lt;-- 'text/_common/endpoint-setup.md'</p>"},{"location":"v1/xcm-sdk/#create-a-polkadot-signer-create-a-polkadot-signer","title":"Create a Polkadot Signer {: #create-a-polkadot-signer }","text":"<p>In this example, you can use a Polkadot.js Keyring{target=_blank} to sign transactions. Please note that this approach is not recommended for production applications.</p> <pre><code>import { Keyring } from '@polkadot/api';\nimport { cryptoWaitReady } from '@polkadot/util-crypto';\nconst privateKey = 'INSERT_PRIVATE_KEY';\nawait cryptoWaitReady();\nconst keyring = new Keyring({\n  ss58Format: 'INSERT_SS58_FORMAT',\n  type: 'sr25519',\n});\nconst pair = keyring.createFromUri(privateKey);\n</code></pre> <p>!!! note     In the above <code>INSERT_PRIVATE_KEY</code> field, you can specify a seed phrase instead of a private key.</p>"},{"location":"v1/xcm-sdk/#get-asset-and-chain-data-asset-chain-data","title":"Get Asset and Chain Data {: #asset-chain-data }","text":"<p>You can use any of the following code examples to retrieve information on the supported assets and the chains that support these assets.</p>"},{"location":"v1/xcm-sdk/#get-list-of-supported-assets-get-list-of-supported-assets","title":"Get List of Supported Assets {: #get-list-of-supported-assets }","text":"<p>To get a list of all of the assets supported by the XCM SDK, you can instantiate the XCM SDK and call the <code>assets</code> function.</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\n\nconst sdkInstance = new Sdk();\nconst assets = sdkInstance.assets();\n\nconsole.log('The supported assets are as follows:');\nassets.assets.forEach((asset) =&gt; {\n  console.log(`- ${asset.originSymbol}`);\n});\n</code></pre>"},{"location":"v1/xcm-sdk/#get-list-of-supported-assets-by-ecosystem-get-supported-assets-by-ecosystem","title":"Get List of Supported Assets by Ecosystem {: #get-supported-assets-by-ecosystem }","text":"<p>To get a list of the supported assets for a particular ecosystem, you can pass in the ecosystem name: <code>polkadot</code>, <code>kusama</code>, or <code>alphanet-relay</code>. For example, the following snippet will get all of the Polkadot assets supported:</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\n\nconst sdkInstance = new Sdk();\nconst assets = sdkInstance.assets('polkadot');\n\nconsole.log('The supported assets within the Polkadot ecosystem are as follows:');\nassets.assets.forEach((asset) =&gt; {\n  console.log(`- ${asset.originSymbol}`);\n});\n</code></pre>"},{"location":"v1/xcm-sdk/#get-list-of-supported-chains-by-asset-get-list-of-supported-assets-by-chain","title":"Get List of Supported Chains by Asset {: #get-list-of-supported-assets-by-chain }","text":"<p>To get a list of the supported source and destination chains for a given asset, you can use the following code snippet, which logs the supported chains by asset for all of the supported assets in the Polkadot ecosystem:</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\n\nconst sdkInstance = new Sdk();\nconst assets = sdkInstance.assets('polkadot');\n\nassets.assets.forEach((asset) =&gt; {\n  const { sourceChains, source } = assets.asset(asset);\n  console.log(`You can send ${asset.originSymbol}...`);\n  if (sourceChains.length &gt; 1) {\n    sourceChains.forEach((sourceChain) =&gt; {\n      const { destinationChains } = source(sourceChain);\n      if (destinationChains.length &gt; 0) {\n        destinationChains.forEach((destination) =&gt; {\n          console.log(`- From ${source.name} to ${destination.name}`);\n        });\n      }\n    });\n  }\n});\n</code></pre>"},{"location":"v1/xcm-sdk/#build-xcm-transfer-data-build-xcm-transfer-data","title":"Build XCM Transfer Data {: #build-xcm-transfer-data }","text":"<p>In order to transfer an asset from one chain to another, you'll need to first build the transfer data, which defines the asset to be transferred, the source chain and address, the destination chain and address, and the associated signer for the transaction. Building the transfer data is the first step; in the next section, you'll learn how to use the transfer data to actually transfer the asset.</p> <p>To get started, you'll use the <code>Sdk</code> function, which will expose two methods for building the XCM transfer data: <code>assets</code> and <code>getTransferData</code>.</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\n\nconst sdkInstance = new Sdk();\n</code></pre> <p>You can choose either method, as both will return the data necessary to initiate an asset transfer between the source chain and the destination chain. Using <code>assets</code> will provide additional data along the way, including the list of supported assets and, once an asset is selected, the supported source and destination chains that are able to send and receive the asset.</p> <p>The process for using <code>assets</code> to build the transfer data is as follows:</p> <ol> <li> <p>Call the <code>assets</code> function and optionally pass in the ecosystem that you want to retrieve a list of assets for or that the asset you want to transfer belongs to. The available ecosystems are: <code>polkadot</code>, <code>kusama</code>, and <code>alphanet-relay</code>. For example:</p> <p><code>js const { assets, asset } = sdkInstance.assets('polkadot');</code></p> <p>This will return a list of the supported assets and the <code>asset</code> function that can be used to define the asset to be transferred</p> </li> <li> <p>Call the <code>asset</code> function and pass in the key or asset object (which includes the key and the origin symbol) to define the asset to be transferred. For example:</p> <p><code>js // Using the key const { sourceChains, source } = asset('dot');</code></p> <p>This will return a list of the supported source chains and the <code>source</code> function, which is used to define the source chain to transfer the asset from</p> </li> <li> <p>Call the <code>source</code> function and pass in the key or the chain object (which includes the key, name, and chain type). For example:</p> <p><code>js // Using the key const { destinationChains, destination } = source('polkadot');</code></p> <p>This will return a list of the supported destination chains where there is an open XCM channel from the source chain for the given asset and the <code>destination</code> function, which is used to define the destination chain to transfer the asset to</p> </li> <li> <p>Call the <code>destination</code> function and pass in the key or the chain object (which includes the key, name, and chain type). For example:</p> <p><code>js // Using the key const { accounts } = destination('moonbeam');</code></p> <p>This will return the <code>accounts</code> function, which is used to define the source and destination addresses and the associated signers for each address</p> </li> </ol> <p>The asset and chain objects are managed within the <code>@moonbeam-network/xcm-config</code> package. You do not need to directly interact with this package as the SDK exposes this data, but there you can find the list of assets{target=_blank} and chain data{target=_blank}.</p> <p>An example of the steps described above to build the transfer data to transfer DOT from the Polkadot relay chain to Moonbeam is as follows:</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\n\nconst sdkInstance = new Sdk();\n\nconst fromPolkadot = async () =&gt; {\n  const { assets, asset } = sdkInstance.assets();\n  console.log(\n    `The supported assets are: ${assets.map((asset) =&gt; asset.originSymbol)}`\n  );\n\n  const { sourceChains, source } = asset('dot');\n  console.log(\n    `The supported source chains are: ${sourceChains.map(\n      (chain) =&gt; chain.name\n    )}`\n  );\n\n  const { destinationChains, destination } = source('polkadot');\n  console.log(\n    `The supported destination chains are: ${destinationChains.map(\n      (chain) =&gt; chain.name\n    )}`\n  );\n\n  const { accounts } = destination('moonbeam');\n  const data = await accounts(\n    pair.address,\n    evmSigner.address, // If using viem, use evmSigner.account.address\n    {\n      evmSigner,\n      polkadotSigner: pair,\n    }\n  );\n};\n\nfromPolkadot();\n</code></pre> <p>!!! note     For more information on each of the <code>Sdk().assets()</code> builder functions, including the parameters and returned data, please refer to the XCM SDK Reference{target=_blank}.</p> <p>If you don't need any of the asset or chain information, you can use the <code>getTransferData</code> function:</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\n\nconst sdkInstance = new Sdk();\n\nconst fromPolkadot = async () =&gt; {\n  const data = await sdkInstance.getTransferData({\n    destinationAddress: evmSigner.address, // If using viem, use evmSigner.account.address\n    destinationKeyOrChain: 'moonbeam',\n    keyOrAsset: 'dot',\n    polkadotSigner: pair,\n    sourceAddress: pair.address,\n    sourceKeyOrChain: 'polkadot',\n    evmSigner,\n  });\n};\n\nfromPolkadot();\n</code></pre> <p>!!! note     For more information on the <code>Sdk().getTransferData()</code> function, including the parameters and returned data, please refer to the XCM SDK Reference{target=_blank}.</p> <p>As previously mentioned, regardless of which method you use to build the transfer data, you'll generate the same output.</p> <p>??? code \"Example response\"</p> <pre><code>```js\n// Send DOT from Polkadot to Moonbeam\n// data\n{\n  destination: {\n    balance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    chain: l {\n      ecosystem: 'polkadot',\n      isTestChain: false,\n      key: 'moonbeam',\n      name: 'Moonbeam',\n      type: 'evm-parachain',\n      assetsData: [Map],\n      genesisHash: '0xfe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d',\n      parachainId: 2004,\n      ss58Format: 1284,\n      usesChainDecimals: false,\n      weight: 1000000000,\n      ws: 'wss://wss.api.moonbeam.network',\n      id: 1284,\n      rpc: 'https://rpc.api.moonbeam.network'\n    },\n    existentialDeposit: e {\n      key: 'glmr',\n      originSymbol: 'GLMR',\n      amount: 0n,\n      decimals: 18,\n      symbol: 'GLMR'\n    },\n    fee: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 33068783n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    min: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    }\n  },\n  getEstimate: [Function: getEstimate],\n  isSwapPossible: true,\n  max: e {\n    key: 'dot',\n    originSymbol: 'DOT',\n    amount: 0n,\n    decimals: 10,\n    symbol: 'DOT'\n  },\n  min: e {\n    key: 'dot',\n    originSymbol: 'DOT',\n    amount: 33068783n,\n    decimals: 10,\n    symbol: 'DOT'\n  },\n  source: {\n    balance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    chain: m {\n      ecosystem: 'polkadot',\n      isTestChain: false,\n      key: 'polkadot',\n      name: 'Polkadot',\n      type: 'parachain',\n      assetsData: Map(0) {},\n      genesisHash: '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3',\n      parachainId: 0,\n      ss58Format: 0,\n      usesChainDecimals: false,\n      weight: 1000000000,\n      ws: 'wss://rpc.polkadot.io'\n    },\n    destinationFeeBalance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    existentialDeposit: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 10000000000n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    fee: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 169328990n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    feeBalance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    max: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    min: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    }\n  },\n  swap: [AsyncFunction: swap],\n  transfer: [AsyncFunction: transfer]\n}\n```\n</code></pre> <p>As you may have noticed in the example response, the transfer data contains information on the asset to be transferred, the source chain, and the destination chain. In addition, a few functions have been exposed:</p> <ul> <li><code>swap()</code> - returns the transfer data necessary to swap the asset from the destination chain back to the source chain</li> <li><code>transfer()</code> - transfers a given amount of the asset from the source chain to the destination chain</li> <li><code>getEstimate()</code> - returns an estimated amount of the asset that will be received on the destination chain, less any destination fees</li> </ul>"},{"location":"v1/xcm-sdk/#transfer-an-asset-transfer-an-asset","title":"Transfer an Asset {: #transfer-an-asset }","text":"<p>Now that you've built the transfer data, you can go ahead and transfer the asset from the source chain to the destination chain. To do so, you can use the <code>transfer</code> function, but first you'll need to specify an amount to send. You can specify the amount in integer or decimal format. For example, if you wanted to send 0.1 DOT, you could use <code>1000000000n</code> or <code>'0.1'</code>. You can use asset conversion methods{target=_blank}, like <code>toDecimal</code> to convert the asset to decimal format.</p> <p>For this example, you can transfer twice the minimum amount required of DOT:</p> <pre><code>...\n\nconst amount = data.min.toDecimal() * 2;\nconsole.log(`Sending from ${data.source.chain.name} amount: ${amount}`);\nconst hash = await data.transfer(amount);\nconsole.log(`${data.source.chain.name} tx hash: ${hash}`);\n</code></pre> <p>As seen in the above snippet, the <code>transfer</code> function returns a transaction hash on the source chain.</p> <p>!!! note     For more information on the parameters and returned data for <code>transfer</code>, please refer to the XCM SDK Reference{target=_blank}.</p>"},{"location":"v1/xcm-sdk/#swap-an-asset-swap-an-asset","title":"Swap an Asset {: #swap-an-asset}","text":"<p>To swap an asset, you can use the same transfer data and call <code>data.swap()</code> to switch the source and destination chain information. From there, you can simply call the <code>transfer</code> function to execute the swap.</p> <pre><code>...\n\nconst swapData = await data.swap();\nconst amount = swapData.min.toDecimal() * 2;\nconsole.log(`Sending from ${swapData.source.chain.name} amount: ${amount}`);\nconst hash = await swapData.transfer(amount);\nconsole.log(`${swapData.source.chain.name} tx hash: ${hash}`);\n</code></pre> <p>The <code>swap</code> function returns the transfer data with the original source chain and destination chain swapped. Using the previous example of sending DOT from Polkadot to Moonbeam, the swap transfer data would send DOT from Moonbeam to Polkadot.</p> <p>??? code \"Example response\"</p> <pre><code>```js\n// swapData\n{\n  destination: {\n    balance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    chain: m {\n      ecosystem: 'polkadot',\n      isTestChain: false,\n      key: 'polkadot',\n      name: 'Polkadot',\n      type: 'parachain',\n      assetsData: Map(0) {},\n      genesisHash: '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3',\n      parachainId: 0,\n      ss58Format: 0,\n      usesChainDecimals: false,\n      weight: 1000000000,\n      ws: 'wss://rpc.polkadot.io'\n    },\n    existentialDeposit: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 10000000000n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    fee: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 169328990n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    feeBalance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    max: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    min: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    }\n  },\n  getEstimate: [Function: getEstimate],\n  isSwapPossible: true,\n  max: e {\n    key: 'dot',\n    originSymbol: 'DOT',\n    amount: 0n,\n    decimals: 10,\n    symbol: 'DOT'\n  },\n  min: e {\n    key: 'dot',\n    originSymbol: 'DOT',\n    amount: 33068783n,\n    decimals: 10,\n    symbol: 'DOT'\n  },\n  source: {\n    balance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    chain: l {\n      ecosystem: 'polkadot',\n      isTestChain: false,\n      key: 'moonbeam',\n      name: 'Moonbeam',\n      type: 'evm-parachain',\n      assetsData: [Map],\n      genesisHash: '0xfe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d',\n      parachainId: 2004,\n      ss58Format: 1284,\n      usesChainDecimals: false,\n      weight: 1000000000,\n      ws: 'wss://wss.api.moonbeam.network',\n      id: 1284,\n      rpc: 'https://rpc.api.moonbeam.network'\n    },\n    destinationFeeBalance: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    existentialDeposit: e {\n      key: 'glmr',\n      originSymbol: 'GLMR',\n      amount: 0n,\n      decimals: 18,\n      symbol: 'GLMR'\n    },\n    fee: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 33068783n,\n      decimals: 10,\n      symbol: 'DOT'\n    },\n    min: e {\n      key: 'dot',\n      originSymbol: 'DOT',\n      amount: 0n,\n      decimals: 10,\n      symbol: 'DOT'\n    }\n  },\n  swap: [AsyncFunction: swap],\n  transfer: [AsyncFunction: transfer]\n}\n```\n</code></pre> <p>!!! note     For more information on the parameters and returned data for <code>swap</code>, please refer to the XCM SDK Reference{target=_blank}.</p>"},{"location":"v1/xcm-sdk/#get-an-estimate-of-the-asset-to-be-received-on-the-destination-chain-get-estimate","title":"Get an Estimate of the Asset to be Received on the Destination Chain {: #get-estimate }","text":"<p>When you send an XCM message, you typically pay fees on the destination chain to execute the XCM instructions. Before you transfer the asset, you can use the <code>getEstimate</code> function to calculate an estimated amount of the asset that will be received on the destination chain, minus any fees.</p> <p>The <code>getEstimate</code> function is tied to a specific transfer request as it is based on the asset being transferred and the destination chain fees, so you'll need to create the transfer data first.</p> <p>You'll need to provide the amount to be transferred to the <code>getEstimate</code> function. In the following example, you'll get the estimated amount of DOT that will be received on Moonbeam when 0.1 DOT is transferred. You can specify the amount in integer (<code>1000000000n</code>) or decimal (<code>'0.1'</code>) format.</p> <pre><code>...\n\nconst amount = '0.1';\nconst estimatedAmount = data.getEstimate(amount);\n\nconsole.log(\n  `The estimated amount of ${\n    data.source.balance.originSymbol\n  } to be received on ${\n    data.destination.chain.name\n  } is: ${estimatedAmount.toDecimal()} ${data.destination.balance.symbol}`\n);\n</code></pre> <p>The <code>getEstimate</code> function returns the estimated amount along with information on the asset being transferred.</p> <p>??? code \"Example response\"</p> <pre><code>```js\n// estimatedAmount\n{\n  key: 'dot',\n  originSymbol: 'DOT',\n  amount: 966931217n,\n  decimals: 10,\n  symbol: 'DOT'\n}\n```\n</code></pre> <p>!!! note     For more information on the parameters and returned data for <code>getEstimate</code>, please refer to the XCM SDK Reference{target=_blank}.</p>"},{"location":"v1/xcm-sdk/#get-transfer-minimum-and-maximum-amounts-transfer-min-max-amounts","title":"Get Transfer Minimum and Maximum Amounts {: #transfer-min-max-amounts }","text":"<p>You can use transfer data to retrieve the minimum and maximum amount of an asset that can be transferred. To do so, you'll access the <code>min</code> and <code>max</code> properties of the asset being transferred:</p> <p>=== \"Minimum\"</p> <pre><code>```js\n...\n\nconst amount = data.min.toDecimal();\nconst symbol = data.min.originSymbol;\n\nconsole.log(`You can send min: ${amount} ${symbol}`);\n```\n</code></pre> <p>=== \"Maximum\"</p> <pre><code>```js\n...\n\nconst amount = data.max.toDecimal();\nconst symbol = data.max.originSymbol;\n\nconsole.log(`You can send max: ${amount} ${symbol}`);\n```\n</code></pre> <p>The <code>min</code> and <code>max</code> properties return the minimum and maximum amount of the asset that can be transferred, along with information on the asset. If the source account does not hold a balance of the chosen asset, the <code>data.max</code> amount will be <code>0n</code>.</p> <p>??? code \"Example response\"</p> <pre><code>```js\n// data.min\n{\n  key: 'dot',\n  originSymbol: 'DOT',\n  amount: 33068783n,\n  decimals: 10,\n  symbol: 'DOT'\n}\n// data.max\n{\n  key: 'dot',\n  originSymbol: 'DOT',\n  amount: 0n,\n  decimals: 10,\n  symbol: 'DOT'\n}\n```\n</code></pre> <p>!!! note     For more information on assets and asset amounts, please refer to the XCM SDK Reference{target=_blank}.</p>"},{"location":"v1/xcm-sdk/#get-transfer-fees-get-transfer-fees","title":"Get Transfer Fees {: #get-transfer-fees }","text":"<p>The transfer data provides information on transfer fees for the source and destination chains. You can retrieve the fees using the following snippet:</p> <pre><code>...\nconst sourceChain = data.source.chain.name;\nconst sourceFee = data.source.fee;\n\nconst destinationChain = data.destination.chain.name;\nconst destinationFee = data.destination.fee;\n\nconsole.log(\n  `You will pay ${sourceFee.toDecimal()} ${\n    sourceFee.symbol\n  } fee on ${\n    sourceChain\n  } and ${destinationFee.toDecimal()} ${\n    destinationFee.symbol\n  } fee on ${destinationChain}.`\n);\n</code></pre> <p>The <code>fee</code> property returns the amount of fees to be paid along with information on the asset.</p> <p>??? code \"Example response\"</p> <pre><code>```js\n// sourceFee\n{\n  key: 'dot',\n  originSymbol: 'DOT',\n  amount: 169328990n,\n  decimals: 10,\n  symbol: 'DOT'\n}\n// destinationFee\n{\n  key: 'dot',\n  originSymbol: 'DOT',\n  amount: 33068783n,\n  decimals: 10,\n  symbol: 'DOT'\n}\n```\n</code></pre> <p>!!! note     For more information on assets and asset amounts, including fees, please refer to the XCM SDK Reference{target=_blank}.</p> <p>--8&lt;-- 'text/_disclaimers/third-party-content.md'</p>"}]}